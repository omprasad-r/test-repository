diff --git a/breakpoints.module b/breakpoints.module
index 68e9ee0..9dd319f 100644
--- a/breakpoints.module
+++ b/breakpoints.module
@@ -5,7 +5,6 @@
  * Breakpoints
  * @todo: provide button to reload breakpoints from theme
  */
-
 define('BREAKPOINTS_SOURCE_TYPE_THEME', 'theme');
 define('BREAKPOINTS_SOURCE_TYPE_MODULE', 'module');
 define('BREAKPOINTS_SOURCE_TYPE_CUSTOM', 'custom');
@@ -95,7 +94,7 @@ function breakpoints_themes_enabled($theme_list) {
       $message = t('The breakpoints from theme %theme are imported and !grouplink.', array(
         '%theme' => check_plain($themes[$theme_key]->info['name']),
         '!grouplink' => l(t('a new group is created'), 'admin/config/media/breakpoints/groups/' . $theme_key),
-      ));
+          ));
       drupal_set_message($message, 'status');
     }
   }
@@ -326,7 +325,7 @@ function _breakpoints_sort_by_weight($a, $b) {
  * Sort breakpoints by weight.
  */
 function _breakpoints_sort_by_weight_array($a, $b) {
-  return _breakpoints_sort_by_weight((object)$a, (object)$b);
+  return _breakpoints_sort_by_weight((object) $a, (object) $b);
 }
 
 /**
@@ -338,9 +337,9 @@ function breakpoints_breakpoint_config_name($breakpoints_breakpoint) {
   }
   else {
     return drupal_strtolower('breakpoints'
-      . '.' . $breakpoints_breakpoint->source_type
-      . '.' . $breakpoints_breakpoint->source
-      . '.' . $breakpoints_breakpoint->name);
+            . '.' . $breakpoints_breakpoint->source_type
+            . '.' . $breakpoints_breakpoint->source
+            . '.' . $breakpoints_breakpoint->name);
   }
 }
 
@@ -440,7 +439,7 @@ function breakpoints_breakpoint_load_all_theme($theme_key = '') {
  * Empty breakpoint object.
  */
 function breakpoints_breakpoint_empty_object() {
-  return (object)breakpoints_breakpoint_empty_array();
+  return (object) breakpoints_breakpoint_empty_array();
 }
 
 /**
@@ -470,7 +469,7 @@ function breakpoints_breakpoint_save(&$breakpoint) {
   $update = (isset($breakpoint->id) && is_numeric($breakpoint->id)) ? array('id') : array();
   // Remove unused multipliers.
   $breakpoint->multipliers = array_filter($breakpoint->multipliers);
-  if(is_null($breakpoint->multipliers)){
+  if (is_null($breakpoint->multipliers)) {
     $breakpoint->multipliers = array();
   }
   // Add the '1x' multiplier.
@@ -528,14 +527,14 @@ function breakpoints_breakpoint_name_exists($machine_name) {
 function breakpoints_breakpoint_machine_name_exists($machine_name) {
   // Just try to load the breakpoint object, we profit from ctool's cache mechanism,
   // better that doing a query to the db every time this function is called.
-  return (bool)breakpoints_breakpoint_load_by_fullkey($machine_name);
+  return (bool) breakpoints_breakpoint_load_by_fullkey($machine_name);
 }
 
 /**
  * Empty breakpoint group object.
  */
 function breakpoints_breakpoint_group_empty_object() {
-  return (object)breakpoints_breakpoint_group_empty_array();
+  return (object) breakpoints_breakpoint_group_empty_array();
 }
 
 /**
@@ -627,7 +626,7 @@ function breakpoints_breakpoint_group_save(&$breakpoint_group) {
   $update = (isset($breakpoint_group->id) && is_numeric($breakpoint_group->id)) ? array('id') : array();
   $result = drupal_write_record('breakpoint_group', $breakpoint_group, $update);
   // rebuild menu if we add a new group
-  if (empty ($update)) {
+  if (empty($update)) {
     menu_rebuild();
   }
   // Reset CTools cache.
@@ -885,15 +884,22 @@ function breakpoint_group_features_export($data, &$export, $module_name = '') {
  * Implements hook_flush_caches().
  */
 function breakpoints_flush_caches() {
-  $themes = list_themes();
-  foreach ($themes as $theme_key => $theme) {
-    if ($theme->status) {
-      $group = breakpoints_breakpoint_group_load($theme_key);
-      if ($group) {
-        breakpoints_breakpoints_group_reload($group, FALSE);
-      }
-      else {
-        breakpoints_themes_enabled(array($theme_key));
+
+  // hook_flush_caches gets invoked with both drupal_flush_all_caches and system_cron 
+  // To avoid frequent menu/theme flushes, we must backtrace caller.
+  $backtrace = debug_backtrace();
+  if (isset($backtrace[3]) && ($backtrace[3]['function'] == 'drupal_flush_all_caches') && empty($backtrace[3]['args'])) {
+
+    $themes = list_themes();
+    foreach ($themes as $theme_key => $theme) {
+      if ($theme->status) {
+        $group = breakpoints_breakpoint_group_load($theme_key);
+        if ($group) {
+          breakpoints_breakpoints_group_reload($group, FALSE);
+        }
+        else {
+          breakpoints_themes_enabled(array($theme_key), FALSE);
+        }
       }
     }
   }
