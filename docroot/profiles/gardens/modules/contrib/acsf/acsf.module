<?php

/**
 * Implements hook_boot().
 *
 * We need to ensure that our autoloader is available as early as possible.
 */
function acsf_boot() {
  try {
    acsf_register_autoloader();
  }
  catch (\RuntimeException $e) {
    if (!drupal_is_cli()) {
      watchdog_exception('acsf', $e);
    }
  }
}

/**
 * Registers the autoloader for all third-party packages.
 *
 * This was taken from the composer_manager module. It provides client code
 * with a convenient helper function to make sure that the autoloader is
 * available in cases like updates and installs.
 */
function acsf_register_autoloader() {
  static $registered = FALSE;
  if (!$registered) {
    $autoloader = __DIR__ . '/vendor/autoload.php';
    if (!file_exists($autoloader)) {
      $message = t('Autoloader not found: @file', array('@file' => $autoloader));
      throw new \RuntimeException($message);
    }
    $registered = TRUE;
    require $autoloader;
  }
}

/**
 * Implements hook_modules_enabled().
 */
function acsf_modules_enabled($modules) {
  acsf_build_registry();
}

/**
 * Implements hook_menu_alter().
 */
function acsf_menu_alter() {
  acsf_build_registry();
}

/**
 * Builds the registry of ACSF compatible class files.
 */
function acsf_build_registry() {
  $registry = array();

  // Create a registry of ACSF compatible classes.
  $registry = module_invoke_all('acsf_registry');

  usort($registry['events'], 'acsf_registry_sort');

  acsf_vset('acsf_registry', $registry);
}

/**
 * Determines sort order for usort.
 */
function acsf_registry_sort($a, $b) {
  if (!isset($a['weight'])) {
    $a['weight'] = 0;
  }
  if (!isset($b['weight'])) {
    $b['weight'] = 0;
  }
  if ($a['weight'] == $b['weight']) {
      return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Retrieves the registry of class files.
 *
 * @return Array
 */
function acsf_get_registry() {
  return acsf_vget('acsf_registry', NULL);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function acsf_form_system_site_maintenance_mode_alter(&$form, &$form_state) {
  // If we are in ACSF maintenance mode, don't let the admin uncheck the checkbox.
  $acsf_maintenance_time = variable_get('acsf_maintenance_time', 0);
  if ($acsf_maintenance_time && variable_get('maintenance_mode', 0)) {
    drupal_set_message(t('ACSF site maintenance in progress.'), 'warning');
    if (REQUEST_TIME > $acsf_maintenance_time) {
      // The update is taking longer than expected.
      drupal_set_message(t('The maintenance was expected to be done already - please be patient. Reload this page to see if maintenance is complete.'), 'warning');
    }
    else {
      // Never show an interval less than 1 minute.
      $remaining = format_interval(60 + $acsf_maintenance_time - REQUEST_TIME, 1);
      drupal_set_message(t('The maintenance should be completed within !interval. Reload this page to see if maintenance is complete.', array('!interval' => $remaining)), 'warning');
    }
    $form['maintenance_mode']['#disabled'] = TRUE;
  }
  $form['#submit'][] = 'acsf_system_site_maintenance_mode_submit';
}

/**
 * Submit handler for the system_site_maintenance_mode form.
 */
function acsf_system_site_maintenance_mode_submit(&$form, &$form_state) {
  // ACSF can force a site into maintenance mode, so when a site admin
  // puts their site into maintenance purposely, we need to track it.
  $maintenance_mode = (int) $form_state['values']['maintenance_mode'];
  if ($maintenance_mode) {
    variable_set('site_owner_maintenance_mode', $maintenance_mode);
  }
  else {
    variable_del('site_owner_maintenance_mode');
  }
}

/**
 * Implements hook_cron().
 */
function acsf_cron() {
  // Periodically refresh the site data.
  $site = acsf_get_acsf_site();
  $refresh_age = time() - 86400 * 7;
  if ($site->last_sf_refresh < $refresh_age) {
    $site->refresh();
  }
}

/**
 * Implements hook_acsf_registry().
 */
function acsf_acsf_registry() {
  return array(
    'events' => array(
      array(
        'weight' => -1,
        'type' => 'acsf_install',
        'class' => '\Acquia\Acsf\AcsfSiteInfoHandler',
      ),
    ),
  );
}

/**
 * Retrieves the site object.
 *
 * This is a safe way to retrieve the site object in cases where the autoloader
 * has not been run. For example, hook_boot does not run during an update.
 *
 * @return \Acquia\Acsf\AcsfSite
 *   The current site object.
 */
function acsf_get_acsf_site() {
  acsf_register_autoloader();
  return \Acquia\Acsf\AcsfSite::load();
}

/**
 * Retrieves the Site Factory name.
 *
 * @return String
 *   The name of the factory.
 */
function acsf_factory_name() {
  static $name;

  if (empty($name)) {
    $site = acsf_get_acsf_site();
    $name = !empty($site->service_name_long) ? $site->service_name_long : t('Acquia Cloud Site Factory');
  }

  return $name;
}

/**
 * Retrieves the Site Factory URL.
 *
 * @return String
 *   The URL of the factory.
 */
function acsf_factory_url() {
  static $url;

  if (empty($url)) {
    $site = acsf_get_acsf_site();

    if (!empty($site) && !empty($site->factory_url)) {
      // First attempt to use the current site.
      $url = $site->factory_url;
    }
    else {
      // If that is not viable, use the global config.
      $config = new \Acquia\Acsf\AcsfConfigDefault();
      $url = $config->getUrl();
    }
  }

  return $url;
}

/**
 * Implements hook_watchdog().
 */
function acsf_watchdog($log_entry) {
  // Only escalate messages of certain severity levels.
  $severity_to_escalate = array(
    WATCHDOG_EMERGENCY,
    WATCHDOG_ALERT,
    WATCHDOG_CRITICAL,
  );

  if (in_array($log_entry['severity'], $severity_to_escalate)) {
    $site = acsf_get_acsf_site();
    $record = array(
      'type' => 'watchdog',
      'message' => t($log_entry['message'], $log_entry['variables']),
      'level' => $log_entry['severity'],
      'timestamp' => REQUEST_TIME,
      'nid' => $site->site_id,
    );
    $acsf_log = new \Acquia\Acsf\AcsfLog();
    $acsf_log->log($record);
  }
}
