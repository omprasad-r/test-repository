<?php

/**
 * @file
 *   Communication with the Gardener.
 */

/**
 * Implements hook_menu().
 */
function gardens_client_menu() {
  if (function_exists('scarecrow_get_gardener_url')) {
    $items['gardens-site-manager'] = array(
      'title' => 'Drupal Gardens Site manager',
      'page callback' => 'drupal_goto',
      'page arguments' => array(scarecrow_get_gardener_url() . '/mysites'),
      // Access will be checked on the Gardener. We have no idea at this point
      // whether the given user has any sites to manage there.
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }
  // acsf_openid defines new paths to connect the users, but to keep the
  // previous paths working for existing customers, we'll keep the definitions
  // and route them to the new functions.
  $items['gardens-login'] = array(
    'title' => 'Site login',
    'page callback' => 'acsf_openid_site_login_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'acsf_openid'),
    'file' => 'acsf_openid.pages.inc',
  );
  $items['gardener/login'] = array(
    'title' => 'Factory login',
    'page callback' => 'acsf_openid_factory_login_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'acsf_openid'),
    'file' => 'acsf_openid.pages.inc',
  );
  $items['gardener/register'] = array(
    'title' => 'Factory registration',
    'page callback' => 'acsf_openid_factory_login_page',
    'page arguments' => array('register'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'acsf_openid'),
    'file' => 'acsf_openid.pages.inc',
  );

  $items['gardener/validate'] = array(
    'title' => 'Factory validate',
    'page callback' => 'acsf_openid_factory_redirection_page',
    'page arguments' => array('validate'),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'acsf_openid'),
    'file' => 'acsf_openid.pages.inc',
  );
  $items['gardener/reset'] = array(
    'title' => 'Factory reset',
    'page callback' => 'acsf_openid_factory_redirection_page',
    'page arguments' => array('reset'),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'acsf_openid'),
    'file' => 'acsf_openid.pages.inc',
  );
  $items['gardener/resend-verification-email/%'] = array(
    'title' => 'Resend email verification reminder',
    'page callback' => 'gardens_client_resend_verification_email',
    'page arguments' => array(2),
    'access callback' => 'scarecrow_is_site_owner',
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
    'file' => 'gardens_client.pages.inc',
  );
  $items['gardens/close-verification-reminder'] = array(
    'title' => 'Close email verification reminder',
    'page callback' => 'gardens_client_close_verification_reminder',
    'access callback' => 'scarecrow_is_site_owner',
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
    'file' => 'gardens_client.pages.inc',
  );
  $items['gardens/dismiss-alert'] = array(
    'title' => 'Dismiss twitter alert',
    'page callback' => 'gardens_client_dismiss_alert',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
    'file' => 'gardens_client.pages.inc',
  );
  $items['gardens/dismiss-aggregator-alert'] = array(
    'title' => 'Dismiss aggregator alert',
    'page callback' => 'gardens_client_dismiss_aggregator_alert',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
    'file' => 'gardens_client.pages.inc',
  );

  /*
  Disabled for now. Will need to be built out for SMB rollout.
  $items['admin/config/people/accounts/local-accounts'] = array(
    'title' => 'Configure the site to allow local accounts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gardens_client_allow_local_user_logins_form'),
    'access callback' => 'gardens_client_allow_local_user_logins_form_access',
  );*/
  return $items;
}

/**
 * Menu access callback for confirmation form.
 */
function gardens_client_allow_local_user_logins_form_access() {
  $forced_openid = gardens_client_subscription_forced_openid();
  $using_openid = acsf_openid_force_openid();
  return user_access('administer users') && $using_openid && !$forced_openid;
}

function gardens_client_theme() {
  return array(
    'gardens_alert' => array(
      'render element' => 'element',
      'file' => 'gardens_client.theme.inc',
      'template' => 'gardens_alert',
    ),
    'gardens_alerts' => array(
      'variables' => array('alerts' => NULL),
      'file' => 'gardens_client.theme.inc',
    ),
  );
}


/**
 * Given a url, swap http for https (or vice versa).
 *
 * @param {string} $url
 *   A URL.
 * @return {string}
 *   The same URL, with its protocol switched.
 */
function gardens_client_swap_url_scheme($url) {
  if (!strpos($url, '://')) {
    return $url;
  }
  list($scheme, $target) = explode('://', $url, 2);
  if ($scheme == 'http') {
    $scheme = 'https';
  }
  elseif ($scheme == 'https') {
    $scheme = 'http';
  }
  return "{$scheme}://{$target}";
}

/**
 * Implements hook_init().
 */
function gardens_client_init() {
  // Display site blocked message instead of site page if the site is blocked.
  $verifier = new EmailVerifier();
  if (!drupal_is_cli() && $verifier->needsSiteBlock() && arg(0) != 'gardener') {
    $factory_url = acsf_factory_url();
    if ($verifier->needsDeleteReminder()) {
      $body = t('You did not verify your user account, therefore your !service_name_long website is blocked.', array('!service_name_long' => acsf_factory_name())) . '<div>' . $verifier->getReminderText('to_be_deleted') .'</div>';
    }
    elseif (user_is_anonymous()) {
      $body = t('This !service_name_long website is blocked. If you are the site owner, verify your email address by clicking the link in the verification email that was sent to you.  If you don\'t have the original email, please visit your <a href="@mysites">My sites</a> page to send it again.', array(
        '@mysites' => url($factory_url . '/user/login?destination=mysites'),
        '!service_name_long' => acsf_factory_name(),
      ));
    }
    else {
      if (scarecrow_is_site_owner()) {
        $body = t('This !service_name_long website is blocked. To access your site, verify your email address by clicking the link in the verification email that was sent to you.  If you don\'t have the original email, please visit your <a href="@mysites">My sites</a> page to send it again.', array(
          '@mysites' => url($factory_url . '/mysites'),
          '!service_name_long' => acsf_factory_name(),
        ));
      }
      else {
        $body = t('This !service_name_long website is blocked.', array('!service_name_long' => acsf_factory_name()));

      }
    }
    $GLOBALS['conf']['maintenance_mode_message'] = $body;
    $GLOBALS['conf']['maintenance_mode'] = 1;
    drupal_deliver_page(MENU_SITE_OFFLINE);
    exit;
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Adds the email verification nag box to the top of the messages section.
 */
function gardens_client_preprocess_page(&$variables) {
  global $user;

  if ($user->uid > 0 && user_access('administer site configuration', $user)) {
    $alerts = array();

    $verifier = new EmailVerifier();
    if ($verifier->needsBlockReminder()) {
      $reminder = array(
        'message' => $verifier->getReminderText(),
        'type' => 'email-verification-reminder',
        'close_path' => 'gardens/close-verification-reminder',
      );
      $alerts[] = $reminder;
    }

    $twitter_alert = variable_get('gardens_alert', array());
    $dismissed = isset($twitter_alert['dismissed']) ? $twitter_alert['dismissed'] : 0;
    $timestamp = isset($twitter_alert['timestamp']) ? $twitter_alert['timestamp'] : 0;
    $user_dismissed = !empty($user->data['alert_dismissed']) ? $user->data['alert_dismissed'] : 0;
    if ($timestamp > $dismissed && $timestamp > $user_dismissed) {
      $twitter_alert['type'] = 'twitter-alert';
      $twitter_alert['close_path'] = 'gardens/dismiss-alert';
      $alerts[] = $twitter_alert;
    }

    if (module_exists('gardens_broadcasting_client') && user_access('receive gardens broadcasted notifications')) {
      $notifications = gardens_broadcasting_client_notifications_get($GLOBALS['user']->uid);
      foreach ($notifications as $tid => $notification) {
        $alert = array(
          'message' => check_plain($notification),
          'type' => 'broadcasted-alert-' . $tid,
          'close_path' => "gardens_broadcasting_client/notifications/dismiss/{$tid}/" . drupal_get_token('gardens_broadcasting_client_notifications'),
        );
        $alerts[] = $alert;
      }
    }

    if (module_exists('aggregator') && in_array('aggregator', variable_get('aggregator_processors', array('aggregator')))) {
      $aggregator_warning = variable_get('gardens_limits_aggregator_items_warning', array());
      // Timestamp stores when did the aggregator started to contain near-limit
      // amount of items. The level stores how close we are to the limit, but
      // it can only be 80, 90 or 100%. The user may dismiss the warning, and
      // then it will only show up again if we get closer to the limit or the
      // aggregator itemcount cleared once already and we have a new warning.
      $warning_level = isset($aggregator_warning['level']) ? $aggregator_warning['level'] : 0;
      $warning_timestamp = isset($aggregator_warning['timestamp']) ? $aggregator_warning['timestamp'] : 0;
      // The last time the user has dismissed the alert.
      $user_dismissed_data = !empty($user->data['aggregator_alert']) ? $user->data['aggregator_alert'] : array();
      if ($warning_level && (!$user_dismissed_data || $warning_timestamp > $user_dismissed_data['timestamp'] || $warning_level > $user_dismissed_data['level'])) {
        $message = $warning_level == 100 ?
          'You’ve reached the feed limit of @max_count items. Oldest items will be automatically removed so you don’t exceed the maximum limit.' :
          'You currently have @count number of feed items, and are reaching the @max_count feed limit. You can remove items yourself, or the oldest will automatically be removed when the limit is reached.';
        $alerts[] = array(
          'message' => t($message, array(
            '@count' => number_format($aggregator_warning['count']),
            '@max_count' => number_format(variable_get('gardens_limits_aggregator_items_max_count', 15000)),
          )),
          'type' => 'aggregagor-item-count-warning',
          'close_path' => 'gardens/dismiss-aggregator-alert/' . $warning_level,
        );
      }
    }

    if (count($alerts) > 0) {
      if (empty($variables['messages'])) {
        $variables['messages'] = theme('status_messages');
      }
      $variables['messages'] = theme('gardens_alerts', array('alerts' => $alerts)) . $variables['messages'];
    }

  }
}

/**
 * Implements hook_menu_alter().
 */
function gardens_client_menu_alter(&$items) {
  // Send users logging in via the mobile app to the factory login page,
  // for sites that use OpenID login.
  if (acsf_openid_force_openid()) {
    $items['mast/login'] = $items['acsf-openid-factory/login'];
  }

  // The Themebuilder is overtaking the admin/appearance path where the site
  // owner originally would have been able to set the admin theme. To site owner
  // will be able to access this feature via this path.
  $items['admin/config/user-interface/admin'] = $items['admin/config/user-interface/acsf-openid'];
  $items['admin/config/user-interface/admin']['title'] = 'Administration theme and overlay';
  $items['admin/config/user-interface/admin']['description'] = 'Configure the theme and overlay used for administration.';
  $items['admin/config/user-interface/admin']['file path'] = drupal_get_path('module', 'acsf_openid');
  unset($items['admin/config/user-interface/acsf-openid']);

  // This variable gets set to 0 when janrain_capture is enabled and logging in
  // is forced through janrain capture. see
  // gardens_client_acsf_openid_user_registration_toggler
  if (variable_get('acsf_openid_registration_handling', 1)) {
    $items['user/register']['theme callback'] = 'gardens_client_user_register_theme';
  }
}

/**
 * Implements hook_acsf_openid_site_name_alter_alter().
 *
 * When the site is not displaying the site's name then ensure that on the
 * factory OpenID screen we only show the site's url.
 */
function gardens_client_acsf_openid_site_name_alter(&$site_name) {
  if (!gardens_client_site_name_is_visible()) {
    $site_name = '';
  }
}

/**
 * Returns TRUE if the site name is visibly displayed in the default theme.
 */
function gardens_client_site_name_is_visible() {
  $theme_name = variable_get('theme_default');
  $block_everything = theme_get_setting('block_everything', $theme_name) && module_exists('block_everything');
  // If the block everything module is being used, we need to look at whether
  // the "site name" block is visible.
  if ($block_everything) {
    return (bool) db_query("SELECT status FROM {block} WHERE module = 'block_everything' AND delta = 'site_name' AND theme = :theme", array(':theme' => $theme_name))->fetchField();
  }
  // Otherwise, we use the normal theme setting.
  else {
    return (bool) theme_get_setting('toggle_name', $theme_name);
  }
}

// == Login UI =================================================================

/**
 * Implements hook_admin_paths().
 */
function gardens_client_admin_paths() {
  // Support the our old OpenID paths.
  return array(
    'gardener/*' => (bool) variable_get('acsf_openid_overlay_for_login', 1),
    'gardens-login' => (bool) variable_get('acsf_openid_overlay_for_login', 1),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the gardens_client login block from sight since acsf_openid should take
 * over it's role. Can not yet delete remove the block definition to avoid
 * losing data, where it has been.
 *
 * @TODO remove block code once we migrated to acsf_openid
 */
function gardens_client_form_block_admin_display_form_alter(&$form, $form_state) {
  unset($form['blocks']['gardens_client_login']);
}

/**
 * Implements hook_block_info().
 */
function gardens_client_block_info() {
  return array(
    'login' => array(
      'info' => acsf_openid_force_openid() ? t('Drupal Gardens login') : t('User login'),
    ),
    'site-manager' => array(
      'info' => t('Drupal Gardens site manager'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function gardens_client_block_view($delta = '') {
  if ($delta == 'site-manager' && user_access('access administration pages')) {
    // @todo: we actually do not have any way to tell whether this user has a
    // site to manage on Drupal Gardens. So we pretend if they have admin access,
    // they might be able to manage sites.
    return array(
      'subject' => t('Site manager'),
      'content' => '<p>' . t('Create new sites and manage your account.') . '</p><p>' . l(t('Go to the site manager'), scarecrow_get_gardener_url() . '/mysites') . '</p>',
    );
  }
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 *
 * Tweak acsf_openid's login block for gardens_distro needs.
 */
function gardens_client_block_view_acsf_openid_login_alter(&$build, $block) {
  if (user_is_anonymous()) {
    // For sites using Janrain Capture, there is only one login/register link.
    if (module_exists('janrain_capture') && variable_get('janrain_capture_enforce', FALSE)) {
      $signin_link = janrain_capture_signin_link();
      $signin_link['#title'] = t('Log in or sign up');
      $build = array('content' => $signin_link);
      return;
    }

    // When there is a condition to redirect to https or http for the login or
    // register we can not use the JavaScript powered dialog to log in as it
    // would error out due to breaching the 'same origin' policy. Detect here if
    // a redirect would happen, will be used in the next section.
    $login_redirect = FALSE;
    if (module_exists('securepages')) {
      // Redirect would happen when exactly one of these are TRUE:
      // - login or register path is in the protected list
      // - we are on https
      // Check on user/login/ajax (which the JavaScript will use) rather than
      // user/login in case there are two different values in the secure and
      // ignore variables - like securing user/login* but ignoring user/login.
      $login_redirect = (securepages_match('user/login/ajax') || securepages_match('user/register/ajax')) xor !empty($GLOBALS['is_https']);
    }

    if (!acsf_openid_force_openid() && module_exists('dialog_user') && !$login_redirect) {
      // For local login sites with dialog_user, output login/register links
      // structured such that they will open in a dialog.
      drupal_add_library('dialog', 'dialog');
      $login_link = l(t('Log in'), 'user/login/nojs', array('attributes' => array('title' => t('Log in'), 'class' => array('use-ajax', 'use-dialog'))));
      $content = t('!login_link', array('!login_link' => $login_link));

      // Show the 'Sign up' link only if user registration is allowed for
      // visitors.
      $registration_allowed = variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) != USER_REGISTER_ADMINISTRATORS_ONLY;
      if ($registration_allowed) {
        $register_link = l(t('Sign up'), 'user/register/nojs', array('attributes' => array('title' => t('Create a new user account.'), 'class' => array('use-ajax', 'use-dialog'))));
        $content .= t(' or !register_link', array('!register_link' => $register_link));
      }

      $build = array(
        'content' => $content,
      );
      return;
    }
  }
}

/**
 * Specific theme callback for user/register.
 */
function gardens_client_user_register_theme() {
  // When user registration takes place in the overlay, display it in the
  // Blossom theme for all users (regardless of whether they would normally
  // have permission to see that theme). We want to use Blossom here even if it
  // is not enabled, rather than variable_get('admin_theme'), in order to match
  // the admin theme provided by the Gardener in previous parts of the user
  // registration workflow.
  if (acsf_openid_overlay_for_registration()) {
    // Since Blossom may not be enabled, we need to pretend that it is the
    // admin theme and enabled for this page request; this is needed so that
    // drupal_theme_access() accepts it as a valid theme when it is returned
    // from this function, and also so any code that calls
    // system_get_info('theme') will work correctly. See similar code in
    // themebuilder_screenshot_custom_theme().
    $theme_name = 'blossom';
    $GLOBALS['conf']['admin_theme'] = $theme_name;
    system_list('theme');
    $lists = &drupal_static('system_list');
    $lists['theme'][$theme_name]->status = TRUE;
    return $theme_name;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_client_form_acsf_openid_admin_settings_form_alter(&$form, $form_state) {
  module_load_include('inc', 'system', 'system.admin');

  // Get current list of themes.
  $themes = system_rebuild_theme_data();
  uasort($themes, 'system_sort_modules_by_info_name');

  foreach ($themes as &$theme) {
    if (!empty($theme->info['hidden'])) {
      continue;
    }
    // Ignore themebuilder themes.
    if (strpos($theme->filename, '/themes/mythemes/acq_')) {
      continue;
    }
    $admin_theme_options[$theme->name] = $theme->info['name'];
  }
  $admin_theme_options['seven'] = t('Seven (Default Drupal administration theme)');
  $admin_theme_options['blossom'] = t('Blossom (Drupal Gardens administration theme)');

  $form += system_themes_admin_form($form, $form_state, $admin_theme_options);
  unset($form['admin_theme']['actions']);

  // On gardens_distro the OpenID login via overlay is enforced.
  $form['overlay_status']['acsf_openid_overlay_for_login']['#access'] = FALSE;
  $form['generic']['#access'] = FALSE;
}

/**
 * Implementation of hook_cron().
 *
 * This function is responsible for gathering site statistics and
 * sending them to the gardener site once per day.
 */
function gardens_client_cron() {
  // When in development, this is set to FALSE.
  // For some reason, Simpletest isn't reading the variable from settings.php
  // so we've added the $GLOBAL here.
  if (variable_get('gardens_client_send_stats', TRUE) &&
    !isset($GLOBALS['drupal_test_info']) &&
    !drupal_installation_attempted() /* Don't run this during install */) {
    $last_stats_run = variable_get('gardens_stats_time', 0);
    // Only gather and sends the stats once per day.  Since we would
    // like site statistics every day we set a threshold of 18 hours
    // after which site data will be sent again.  If we do this every
    // 24 hours then we can lose site data because cron may have been
    // run just less than 24 hours ago due to the inherent variance of
    // the cron service as it works through perhaps less sites than
    // the day before (due to site deletions) or because cron on each
    // site takes more or less time than the day before.
    $eighteen_hours = 60*60*18; // 18 hours expressed in seconds.
    if (REQUEST_TIME >= ($last_stats_run + $eighteen_hours)) {
      gardens_client_send_site_data();
    }
  }
}

function gardens_client_send_site_data() {
  // Lock access to the code that sends site data.  If the code is currently
  // being executed we can exit and not worry about sending it again.  If this
  // code is executed multiple times simultaneously, PDO exceptions occur on
  // the gardener.
  if (lock_acquire('gardens_client_site_data', 240.0)) {
    $path = dirname(__FILE__);
    include_once("$path/stats.inc");
    $stats = gardens_client_generate_site_stats();

    try {
      $message = new \Acquia\Acsf\AcsfMessageRest('POST', 'site-api/v1/site-stats', array('stats' => $stats));
      $message->send();
      $response = $message->getResponseBody();
      $rpc_result = $response['saved'];
    }
    catch (Exception $e) {
      watchdog('gardens_client', $e->getMessage(), array(), WATCHDOG_ERROR);
    }

    if ($rpc_result !== NULL) {
      variable_set('gardens_stats_time', REQUEST_TIME);
    }
    else {
      syslog(LOG_ERR, 'GardensError: AN-22473 - Failed to send site stats for site GardensError:' .$_SERVER['HTTP_HOST']);
    }
  }
}

/**
 * Make an XML-RPC request on the Gardener and record the data.
 *
 * Returns TRUE if data was retrieved, FALSE otherwise.
 */
function gardens_client_phone_home() {
  $site = acsf_get_acsf_site();
  return $site->refresh();
}

/**
 * Returns the site's gardens specific database name.
 *
 * In the past the database names were in the 'g<site nid>' format, but it has
 * been changed with pivot to something like <environment>db<db role>. Some of
 * the code still depends on the old format though.
 */
function gardens_client_get_gardens_db_name() {
  global $databases;
  return variable_get('acsf_db_name', $databases['default']['default']['database']);
}

/**
 * Tells the caller if an alert should be sent for gardener unreachability.
 *
 * Keeps a count of how many times the error has occurred and can reset the
 * counter if all OK.  Handling the error logging here would be cumbersome, as
 * different callers do different things with the error (exception, syslog etc).
 * Cache flushes caused by the variable_set should be acceptable as the phone
 * home code itself calls variable_set().
 *
 * @param $reset
 *   Pass TRUE to reset the error counter to zero.
 *
 * @return
 *   TRUE if this site has exceeded its threshold for being unable to reach the
 *   gardener.
 *   FALSE if all is OK, or the threshold has not yet been reached
 */
function gardens_client_gardener_unreachable_alert($reset = FALSE) {
  if ($reset) {
    // default is 0, so no need to keep this set.
    variable_del('gardens_client_gardener_unreachable_count');
    return FALSE;
  }

  variable_set('gardens_client_gardener_unreachable_count', variable_get('gardens_client_gardener_unreachable_count', 0) + 1);
  if (variable_get('gardens_client_gardener_unreachable_count', 0) > variable_get('gardens_client_gardener_unreachable_threshold', 3)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Whether the subscription used by the site allows local user accounts.
 */
function gardens_client_subscription_forced_openid() {
  $site = acsf_get_acsf_site();
  return (bool) $site->acquia_zuora['force_openid'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
/* Disabled for now. Will need to build out proper for SMB.
function gardens_client_form_user_admin_settings_alter(&$form, &$form_state) {
  $forced_openid = gardens_client_subscription_forced_openid();
  $using_openid = acsf_openid_force_openid();

  $message = '';
  if ($using_openid) {
    $message = t('User accounts are registered with and shared within !service_name_long.', array('!service_name_long' => acsf_factory_name()));
    if (!$forced_openid) {
      $message .= '<br />' . t() . t('You can optionally <a href="@enable-local">enable the use of local user accounts</a>.', array('@enable-local' => url('admin/config/people/accounts/local-accounts')));
    }
  }
  else {
    $message = t('User accounts for administrators are registered with and shared within !service_name_long. Other user accounts are local to this website only.', array('!service_name_long' => acsf_factory_name()));
  }
  $form['registration_cancellation']['force_openid'] = array(
    '#type' => 'item',
    '#title' => t('Account sharing'),
    '#markup' => $message,
    '#weight' => -200,
  );
}*/

/**
 * Confirmation form to turn on local user accounts.
 */
function gardens_client_allow_local_user_logins_form($form, &$form_state) {
  $question = t('Are you sure you want to turn on local user accounts?');
  $description = t('Currently, user accounts are registered with and shared within !service_name_long. Allowing local user accounts means users will be individually managed on this site and no cross-site relations are maintained. <strong>This change is irreversible.</strong>', array('!service_name_long' => acsf_factory_name()));
  return confirm_form($form, $question, 'admin/config/people/accounts', $description);
}

/**
 * Form submission callback for the confirmation form.
 */
function gardens_client_allow_local_user_logins_form_submit($form, &$form_state) {
  acsf_openid_allow_local_user_logins();
  drupal_set_message(t('Local user account creation enabled.'));
  $form_state['redirect'] = 'admin/config/people/accounts';
}

/**
 * The EmailVerifier class is responsible for determining whether this site is
 * owned by someone who has verified their email address, and whether they
 * need a reminder.
 */
class EmailVerifier {

  private $verified = 0;
  private $site_to_be_blocked_date = '';
  private $site_to_be_deleted_date = '';
  private $warn_site_deletion = '';
  private $message_muted = 0;
  private $last_updated = 0;
  // How often we re-check status at the gardener.
  const CACHE_STATUS_FOR = 300;
  // If the user mutes, how long until we nag again.
  const MUTE_FOR = 86400;

  public function __construct() {
    $site = acsf_get_acsf_site();
    $status = (array) $site->verification_status;
    foreach ($status as $key => $value) {
      $this->$key = $value;
    }
    $this->message_muted = variable_get('gardens_client_verification_message_muted', NULL);
  }

  /**
   * Indicates whether the email has been verified.
   *
   * @return
   *   TRUE if the email has been verified; FALSE otherwise.
   */
  public function isVerified() {
    // PHP '0' evaluates to TRUE.
    if ($this->verified === '0' || !$this->verified) {
      return FALSE;
    }
    return TRUE;
  }

  /**
   * Determine whether the user needs a reminder to verify their email address.
   *
   * @return <boolean>
   *   TRUE if they need a reminder, FALSE otherwise.
   */
  public function needsBlockReminder() {
    // Only pester site owners who have not verified their address and who
    // have not acknowledged the nag box recently.
    return !$this->isVerified() && !$this->isMuted() && scarecrow_is_site_owner();
  }

  /**
   * Determine whether the user needs a strong reminder to verify their email address.
   *
   * @return <boolean>
   *   TRUE if they need a reminder, FALSE otherwise.
   */
  public function needsDeleteReminder() {
    // Only pester site owners who have not verified their address and who
    // have not acknowledged the nag box recently.
    return !$this->isVerified() && scarecrow_is_site_owner() && $this->warn_site_deletion;
  }

  /**
   * Determine whether the site should be blocked from access.
   */
  public function needsSiteBlock() {
    return !$this->isVerified() && $this->warn_site_deletion;
  }

  /**
   * Determine whether the site owner has closed the verification nag recently.
   *
   * @return <boolean>
   *   TRUE if the nag has been muted recently, FALSE otherwise.
   */
  private function isMuted() {
    if (empty($this->message_muted)) {
      return FALSE;
    }
    $start_nagging = $this->message_muted + self::MUTE_FOR;
    return (REQUEST_TIME < $start_nagging);
  }

  /**
   * Returns personalized reminder text for use in the nag box.
   */
  public function getReminderText($deadline_type = 'to_be_blocked') {
    $reminder = '<div>' . t('<strong>Check your e-mail to complete registration.</strong> An e-mail has been sent to @email. ', array('@email' => $GLOBALS['user']->mail)) . '</div>';
    // Skip this part if we don't have a date.
    $date = $this->getVerificationDeadline($deadline_type);
    if ($date) {
      $reminder .= t('Click the link in the message by @date to avoid having your account and site deleted.', array('@date' => $date));
    }
    else {
      $reminder .= t('Click the link in the message immediately to avoid having your account and site deleted.');
    }

    $id = 'resend-email-link';
    $url = 'gardener/resend-verification-email/' . drupal_get_token('gardens_client_resend_verification_email');
    $reminder .= '<div class="resend-email">' . l(t('Resend'), $url, array('attributes' => array('id' => $id))) . '</div>';

    $ajax_settings = array();
    $ajax_settings[$id . '-close'] = array(
      'selector' => '#' . $id,
      'url' => base_path() . $url,
      'event' => 'click',
    );
    drupal_add_js(array('ajax' => $ajax_settings), 'setting');

    return $reminder;
  }

  /**
   * Return the email verification deadline in human-readable string format.
   */
  private function getVerificationDeadline($deadline_type) {
    $property = ($deadline_type == 'to_be_deleted') ? 'site_to_be_deleted_date' : 'site_to_be_blocked_date';
    if (!empty($this->$property)) {
      // Properties come from the Gardener in human-readable format.
      // TODO: Internationalize.
      return $this->$property;
    }
    return FALSE;
  }
}

/**
 * Retrieves the name of the stage this server is part of.
 */
function gardens_client_stage_name_get() {
  $hostname_full = php_uname('n');
  $hostname = explode('.', $hostname_full);
  return isset($hostname[1]) ? $hostname[1] : '';
}

/**
 * Implements hook_acsf_openid_factory_return_page_options_alter().
 */
function gardens_client_acsf_openid_factory_return_page_options_alter(&$options, $current_page) {
  if (gardens_client_openid_return_secure()) {
    $options['https'] = TRUE;
  }
}

/**
 * Check whether openid return callbacks need to be on HTTPS.
 *
 * Currently only checks whether securepages is set to HTTPS for all authenticated
 * traffic.  This covers our current use case, but will need more complex logic if
 * any more complex relationships are needed.
 *
 * @return
 *   TRUE if the callback should use HTTPS, otherwise FALSE.
 */
function gardens_client_openid_return_secure() {
  if (module_exists('securepages')) {
    $roles = variable_get('securepages_roles', array());
    if (is_array($roles) && !empty($roles[DRUPAL_AUTHENTICATED_RID])) {
      // If securepages is enabled and set to SSL for authenticated user role,
      // then we know that the openid callback must be HTTPS, otherwise the user
      // will first land on an HTTP url, and then hop to HTTPS on redirect,
      // which can log the user out. There are most likely improvements in
      // Drupal 7.13, but these don't cover everything.
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Ensure that we are disabling acsf_openid's user/register path override when
 * logging in via janrain capture is enforced.
 */
function gardens_client_form_janrain_capture_settings_alter(&$form, $form_state) {
  $form['#submit'][] = 'gardens_client_acsf_openid_user_registration_toggler';
}

/**
 * Toggles acsf_openid's user/register override based on janrain capture config.
 *
 * @see gardens_client_form_janrain_capture_settings_alter()
 */
function gardens_client_acsf_openid_user_registration_toggler($form, $form_state) {
  variable_set('acsf_openid_registration_handling', empty($form_state['values']['janrain_capture_enforce']));
}

