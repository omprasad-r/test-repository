<?php

/**
 * @file
 * Registers contrib-space scrub handlers with ACSF.
 *
 * This is generally only needed during initial site duplication, while the
 * duplicated site is being prepared to hand off to the user.
 */

/**
 * Implements hook_acsf_registry().
 */
function gardens_duplication_acsf_registry() {
  $path = drupal_get_path('module', 'gardens_duplication') . '/classes';
  $scrub_handlers = array(
    'GardensDuplicationScrubConfigurationHandler' => 0,
    'GardensDuplicationScrubJanrainHandler'       => 0,
    'GardensDuplicationScrubOauthHandler'         => 0,
    'GardensDuplicationScrubWebformHandler'       => 0,
    'GardensDuplicationScrubVotingApiHandler'     => 0,
    'GardensDuplicationScrubAcquiaLiftHandler'    => 0,
  );
  foreach ($scrub_handlers as $class => $weight) {
    $events[] = array(
      'type' => 'site_duplication_scrub',
      'class' => $class,
      'path' => $path,
      'weight' => $weight,
    );
  }
  return array('events' => $events);
}

/**
 * Alters the counts reported by `drush acsf-duplication-scrub-progress`.
 *
 * @param $data
 *   An associative array of counts representing the total number of items
 *   remaining to scrub, keyed by [type]_count.
 *
 * @see drush_acsf_duplication_scrub_progress()
 */
function gardens_duplication_acsf_duplication_scrub_remaining_counts_alter(&$data) {
  if (module_exists('webform')) {
    $data['webform_submission_count'] = GardensDuplicationScrubWebformHandler::countRemaining();
  }
}

/**
 * Alters the scrub event context of `drush acsf-duplication-scrub-batch`.
 *
 * Use this alter hook to add optional data to the scrub event. The data added
 * here is available via the $this->event->context array in event handlers.
 *
 * @param $data
 *   An associative array of context data needed in the event handlers.
 *
 * @see drush_acsf_duplication_scrub_batch()
 */
function gardens_duplication_acsf_duplication_scrub_context_alter(&$data) {
  $options = array(
    'retain_janrain_settings',
    'retain_webform_submissions',
    'retain_voting_api_data',
    'retain-acquia-lift-config',
  );
  $exact_copy = drush_get_option('exact-copy');
  foreach ($options as $option) {
    $data['scrub_options'][$option] = drush_get_option($option, $exact_copy);
  }

  $batch = drush_get_option('batch', 1000);
  $data['scrub_options']['batch_webform'] = drush_get_option('batch-webform', $batch);
  $data['scrub_options']['batch_votingapi'] = drush_get_option('batch-votingapi', $batch);

  $data['scrub_options']['mollom_public_key'] = drush_get_option('mollom-public-key');
  $data['scrub_options']['mollom_private_key'] = drush_get_option('mollom-private-key');
}

/**
 * Alters the list of admin roles of users to preserve.
 *
 * @param array $admin_roles
 *   An indexed array of admin roles of users to preserve.
 *
 * @see AcsfDuplicationScrubUserHandler::getOpenIdAdmins()
 */
function gardens_duplication_acsf_duplication_scrub_admin_roles_alter(&$admin_roles) {
  if ($gardens_site_owner_role = variable_get('gardens_site_owner_role')) {
    $admin_roles[] = $gardens_site_owner_role;
  }
}

/**
 * Alters the list of user IDs to preserve.
 *
 * @param array $preserved_uids
 *   An indexed array of user IDs to preserve.
 *
 * @see AcsfDuplicationScrubUserHandler::getPreservedUsers()
 */
function gardens_duplication_acsf_duplication_scrub_preserved_users_alter(&$preserved_uids) {
  if (module_exists('mast')) {
    if ($mast_uid = variable_get('mast_app_uid')) {
      $preserved_uids[] = $mast_uid;
    }
  }
}

