<?php
// $Id:$

/**
 * @file
 * The asset that handles the font-families.css file, which contains
 * @font-face declarations for each of the open-source fonts used in the theme.
 */


require_once(dirname(__FILE__) . '/../asset.inc');

class FontFacesAsset extends ThemebuilderAsset {

  public function __construct($theme) {
    parent::__construct($theme);
    $this->asset_name = 'font-families.css';
  }

  /**
   * Returns the name of the file that will be generated by this asset.
   */
  public function getFilename() {
    return $this->asset_name;
  }

  /**
   * Output @font-face rules for each font used in the theme's custom css.
   */
  public function renderString() {
    $output = '';
    $stacks = themebuilder_styleedit_get_font_stacks('FontFaceFontStack');
    $fonts = $this->getAllProperties();
    foreach ($fonts as $font) {
      $output .= $stacks[$font]->getFontFaceRule('theme') . "\n";
    }
    return $output;
  }

  /**
   * Return a list of all @font-face fonts used in this theme's custom css.
   *
   * @return array
   *   An array of all @font-face fonts referenced in custom.css.
   */
  public function getAllProperties() {
    $cssProperties = $this->theme->getCustomCssProperties();
    $stacks = themebuilder_styleedit_get_font_stacks('FontFaceFontStack');
    $available_families = array();
    foreach ($stacks as $name => $stack) {
      $available_families[$stack->getFontFamily()] = $name;
    }

    $families_used = array();
    foreach ($cssProperties as $rule => $properties) {
      foreach ($properties as $name => $value) {
        if ($name == 'font-family') {
          $families_used[] = $value;
        }
      }
    }
    $font_faces = array();
    foreach ($families_used as $family) {
      if (isset($available_families[$family])) {
        $font_faces[] = $available_families[$family];
      }
    }
    return array_flip(array_flip($font_faces));
  }

  /**
   * This asset depends entirely on custom.css and is rewritten dynamically,
   * so no DB storage is required.
   */
  protected function save() {}
  protected function delete() {}
  protected function load() {}

}
