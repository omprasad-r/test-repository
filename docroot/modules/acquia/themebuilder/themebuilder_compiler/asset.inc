<?php
// $Id:$

/**
 * @file
 * The basic interface for assets.
 */

/**
 * Base asset class.
 *
 * This class provides the basic interface used to interact with all asset
 * implementations.
 *
 * Assets do one thing: they write files.
 * 
 */
abstract class ThemebuilderAsset {
  protected $theme_name;
  protected $theme;
  protected $asset_name;
  public $aid;

  public function __construct($theme) {
    $this->setTheme($theme);
  }
  
  function setTheme($theme) {
    $this->theme = $theme;
    $this->theme_name = $theme->getName();
  }
  
  public static function factory($type, $aid = NULL, $name = NULL) {
    if ($aid) {
      $asset = new $name($theme);
      $asset->aid = $aid;
    }
  }

  /**
   * Returns the name of the file that will be generated by this asset.
   */
  public function getFilename() {
    return $this->asset_name;
  }
  
  public abstract function renderString();

  /**
   * Writes this asset into the appropriate file.
   *
   * @param string $path The path to the directory in which the file should
   *   be written.
   * @return The number of bytes written into the file.
   */
  public function renderFile($path) {
    $filename = $this->getFilename();
    $contents = $this->renderString();
    return file_put_contents($path .'/' .$filename, $contents);
  }

  public abstract function getAllProperties();

  public function getThemeName() {
    return $this->theme_name;
  }
  
  function setThemeName($theme_name) {
    $this->theme_name = $theme_name;
  }

  public function getAssetName() {
    return $this->asset_name;
  }
  
  /**
   * Creates a record in the DB.
   */
  public function saveAsset() {
    themebuilder_log_trace_enter(__METHOD__ . $this->asset_name);
    $tid = $this->theme->getTid();
    if (!$tid) {
      throw new Exception('Cannot save asset in Database, no tid provided');
    }
    $asset = new stdClass();
    $asset->tid = $tid;
    $asset->type = get_class($this);
    $asset->name = $this->getAssetName();
    
    try {
      if (empty($this->aid)) {
        $aid = db_select('themebuilder_assets', 'a')
          ->fields('a', array('aid'))
          ->condition('tid', $tid)
          ->condition('type', $asset->type)
          ->orderBy('a.aid', 'DESC')
          ->range(0, 1)
          ->execute()
          ->fetchField();
        $this->aid = intval($aid);
      }
      if (!empty($this->aid)) {
        $asset->aid = $this->aid;
        $result = drupal_write_record('themebuilder_assets', $asset, array('aid'));
      } else {
        //New asset
        $result = drupal_write_record('themebuilder_assets', $asset);
        $this->aid = $asset->aid;
      }
    } catch (PDOException $e) {
      //@TODO: Add error handling here for $result;
      throw $e;
    }
    
    if (!$result) {
      throw new Exception("unable to save asset for unknown reason");
    }
    
    //Runs the save operation for the asset itself.
    $this->save();
    //not implemented
    themebuilder_log_trace_exit(__METHOD__ . $this->asset_name);
  }
  
  function loadAsset() {
    themebuilder_log_trace_enter(__METHOD__ . $this->asset_name);
    $this->load();
    themebuilder_log_trace_exit(__METHOD__ . $this->asset_name);
  }
  
  public function deleteAsset() {
    $this->delete();
    if ($this->aid) {
      $result = db_delete('themebuilder_assets', array())
    ->condition('aid', $this->aid)
    ->execute();
    }
  }

  public function importAsset() {
    $this->importData();
  }

  public function exportAsset($directory) {
    $this->export($directory);
  }

  /**
   * Implement this to save asset-specific data to the database.
   */
  abstract protected function save();

  /**
   * Implement this to delete asset-specific data from the database.
   */
  abstract protected function delete();

  /**
   * Implement this to load asset-specific data from the database.
   */  
  protected function load() {}

  /**
   * Implement this to import asset-specific data from the filesystem on theme import.
   */
  protected function importData() {}

  /**
   * Implement this to export asset-specific data to the filesystem on theme export.
   *
   * @param $directory
   *   The directory to which the theme is being exported.
   */  
  protected function export($directory) {}
}


/**
 * This implementation of assets intends to be much lighter and dumber than the
 * previous one.
 *
 * An Asset does the following:
 *
 * 1. Can parse a file format and store it's content in a form it can work with.
 * 2. Can write out the contents back into a file
 *
 * It does not know anything about a theme, it does not know what its filename is,
 * it has no file name.
 *
 * It does not know about any database tables or 3rd party storage
 * (but it could if it needed it temporarily).
 *
 * It exists only as required by a theme.  It can contain business logic on
 * how it can modify its contents, or it can leave that to the theme.
 *
 * It is simple.
 *
 */
abstract class ThemebuilderAssetNew {
  function __construct() {

  }

  public function write($filename) {
    themebuilder_log_trace_enter(__METHOD__);
    file_put_contents($filename, $this->renderString());
    themebuilder_log_trace_exit(__METHOD__);
  }

  abstract protected function renderString();

}
