<?php

/**
 * @file
 * This module provides a link to Gigya profiles from a user's Drupal account.
 *
 * Development of this module is sponsered by Gigya, Inc.
 */

include_once dirname(__FILE__) . '/includes/gigya.field.inc';
include_once dirname(__FILE__) . '/includes/gigya.rules.inc';
include_once dirname(__FILE__) . '/includes/gigya_comments.inc';

/**
 * Constants defined for various Gigya settings.
 */
define('GIGYA_ALREADY_DRUPAL_USER', 'already_drupal_user');
define('GIGYA_DEFAULT_ICONSIZE', 30);
define('GIGYA_DEFAULT_LOGINUI_WIDTH', '210');
define('GIGYA_DEFAULT_LOGINUI_HEIGHT', '110');
define('GIGYA_DEFAULT_LOGINUI_CONTAINERID', 'divGigyaLogin');
define('GIGYA_DEFAULT_CONNECTUI_WIDTH', '175');
define('GIGYA_DEFAULT_CONNECTUI_HEIGHT', '85');
define('GIGYA_DEFAULT_CONNECTUI_CONTAINERID', 'divConnect');
define('GIGYA_DEFAULT_CONNECTUI_CAPTIONTEXT', 'Select social networks');
define('GIGYA_DEFAULT_SHARE_SUBJECT', 'A site recommendation for you');
define('GIGYA_DEFAULT_SHARE_MESSAGE', 'I wanted to recommend this site <br/>to you. I enjoy it and think you will like it.');
define('GIGYA_DEFAULT_SHARE_LINK_TITLE', 'Share with friends');
define('GIGYA_DEFAULT_SHARE_UI_LINK_TITLE', 'Share UI title');
define('GIGYA_DEFAULT_SHARE_UI_SUBJECT', 'Share UI: A site recommendation for you');
define('GIGYA_DEFAULT_SHARE_UI_MESSAGE', 'Share UI: I wanted to recommend this site <br/>to you. I enjoy it and think you will like it.');
define('GIGYA_DEFAULT_SHARE_UI_SHOW_EMAIL_BUTTON', TRUE);
define('GIGYA_DEFAULT_SHARE_UI_SHOW_MORE_BUTTON', TRUE);
define('GIGYA_DEFAULT_LOGINUI_FBCONNECT', TRUE);
define('GIGYA_DEFAULT_SHARE_BOTTONS', 'share, email, pinterest, twitter-tweet, google-plusone, facebook-like');
define('GIGYA_MV', 'mayor');

/**
 * Implements hook_init().
 */
function gigya_init() {
  global $base_path, $base_url;

  // Load the basic include files.
  module_load_include('inc', 'gigya');
  $path = drupal_get_path('module', 'gigya');

  $networks = trim(variable_get('gigya_network_list', '*'));
  $gigya_apikey = trim(variable_get('gigya_APIKey', ''));
  $lang = variable_get('gigya_language', 'en');
  $gigya_js_settings = array(
    'enabledProviders' => $networks,
    'lang' => $lang,
  );
  $gigya_js_settings['connectWithoutLoginBehavior'] = variable_get('gigya_login_plugins_login', 'loginExistingUser');

  // Merge configuration from global configuration.
  $extra_global = variable_get('gigya_global_extra', array());
  if (!empty($extra_global)) {
    foreach ($extra_global as $key => $parm) {
      $gigya_js_settings[$key] = gigya_json_to_php($parm);
    }
  }
  // Allow other modules to modify global configuration.
  drupal_alter('gigya_global_conf', $gigya_js_settings);

  // Add all the js here, to speed page load w/ aggregation enabled.
  // Also add the basic JS needed for the module.

  $uri_prefix = !empty($_SERVER['HTTPS']) ? 'https://cdns' : 'http://cdn';
  $gigya_ga = variable_get('gigya_social_analytics', 0);
  if (!empty($gigya_ga)) {
    drupal_add_js($uri_prefix . '.gigya.com/js/gigyaGAIntegration.js', 'external');
  }
  $global_js = '<script src="' . check_url(url($uri_prefix . '.gigya.com/JS/socialize.js?apikey=' . $gigya_apikey)) . '">' . json_encode($gigya_js_settings) . '</script>';
  $head = array(
    '#type' => 'markup',
    '#markup' => $global_js,
  );
  drupal_add_html_head($head, 'gigya');
  $gigya_js_settings['mv'] = GIGYA_MV;
  drupal_add_js(array('gigya' => $gigya_js_settings), 'setting');
  drupal_add_js($path . '/js/gigya.js');
  drupal_add_js($path . '/js/gigya.behaviors.js');
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.cookie');
  ctools_add_js('ajax-responder');
  // Added Gamification notification if enabled.
  if (variable_get('gigya_gm_enable', FALSE) && variable_get('gigya_gm_enable_notifications', FALSE)) {
    // Show notifications only to logged in users.
    if (user_is_logged_in()) {
      $notification_settings = array('enable' => 'true');
      drupal_alter('gigya_gm_notifications', $notification_settings);
      drupal_add_js(array('gigyaGMnotification' => $notification_settings), 'setting');
    }
  }

  $login_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
  drupal_add_js(array('gigya' => array('loginMode' => $login_mode)), 'setting');
  // If the user is logged in Attach the gigya object to the user object.
  if (user_is_logged_in()) {
    global $user;

    // Attach the Gigya object to the user object.
    GigyaUser::load($user);
    $raas_profile = array(
      'screenSet' => variable_get('profile_web_screen_id', 'Profile-web'),
      'mobileScreenSet' => variable_get('profile_mobile_screen_id', 'Profile-mobile'),
    );
    drupal_add_js(array('gigya' => array('raas' => array('profile' => $raas_profile))), 'setting');

  }
  else {
    // Add raas vars.
    if ($login_mode == 'raas') {
      // Raas settings.
      $raas_login = array(
        'screenSet' => variable_get('web_screen_id', 'Login-web'),
        'mobileScreenSet' => variable_get('mobile_screen_id', 'Login-mobile'),
        'startScreen' => variable_get('login_screen_id', 'gigya-login-screen'),
      );
      $raas_register = array(
        'screenSet' => variable_get('web_screen_id', 'Login-web'),
        'mobileScreenSet' => variable_get('mobile_screen_id', 'Login-mobile'),
        'startScreen' => variable_get('register_screen_id', 'gigya-register-screen'),
      );
      drupal_add_library('system', 'drupal.ajax');
      ctools_include('ajax');
      ctools_include('modal');
      ctools_modal_add_js();
      drupal_add_js(array('gigya' => array('raas' => array('login' => $raas_login))), 'setting');
      drupal_add_js(array('gigya' => array('raas' => array('register' => $raas_register))), 'setting');
    }
  }
}

/**
 * Implements hook_permission().
 */
function gigya_permission() {
  return array(
    'administer gigya' => array(
      'title' => t('administer gigya'),
      'description' => t('Configure And Set Up Gigya Socialization'),
    ),
    'bypass_gigya_raas' => array(
      'title' => t('Bypass Registration-as-a-Service'),
      'description' => t("Allow bypassing Gigya's Registration-as-a-Service and logging-in via Drupal standard login ( /user)."),
    ),
  );
}

/**
 * Implements hook_help().
 */
function gigya_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/gigya':
      return '<p>' . t('Server-wide setup of the Gigya module.') . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function gigya_theme() {
  $themes = array(
    'gigya_connect_display' => array(),
    'gigya_friends' => array(
      'variables' => array('friends' => NULL),
    ),
    'gigya_link_accounts' => array(
      'render element' => 'form',
      'template' => 'gigya-link-accounts',
      'path' => drupal_get_path('module', 'gigya') . '/theme',
    ),
    'gigya_register' => array(
      'variables' => array(
        'bio' => NULL,
        'registration_form' => NULL,
        'link_accounts_form' => NULL,
      ),
      'template' => 'gigya-register',
      'path' => drupal_get_path('module', 'gigya') . '/theme',
    ),
    'gigya_login_block' => array(
      'variables' => array(
        'form_id' => NULL,
        'suppress_title' => FALSE,
      ),
      'template' => 'gigya-login-block',
      'path' => drupal_get_path('module', 'gigya') . '/theme',
    ),
    'gigya_raas_block' => array(
      'variables' => array(
        'links' => NULL,
      ),
      'template' => 'gigya-raas-block',
      'path' => drupal_get_path('module', 'gigya') . '/theme',
    ),
    'gigya_user_profile' => array(
      'variables' => array('bio' => NULL),
      'template' => 'gigya-user-profile',
      'path' => drupal_get_path('module', 'gigya') . '/theme',
    ),
    'gigya_activity_feed_block' => array(
      'variables' => array('continer_id' => variable_get('gigya_activety_feed_container_id', 'ActivityFeedDiv')),
      'template' => 'gigya-activity-feed-block',
      'path' => drupal_get_path('module', 'gigya') . '/theme',
    ),
  );
  return $themes;
}


/**
 * Implements hook_menu().
 */
function gigya_menu() {
  $items['admin/config/services/gigya'] = array(
    'title' => 'Gigya settings',
    'access arguments' => array('administer gigya'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_admin_form'),
    'description' => 'Administer Gigya\'s configuration options.',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gigya.admin.inc',
  );
  $items['admin/config/services/gigya/global'] = array(
    'title' => 'Global Settings',
    'access arguments' => array('administer gigya'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_admin_form'),
    'description' => 'Gigya Global Configuration.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'gigya.admin.inc',
  );

  // Add the Login component config tab.
  $items['admin/config/services/gigya/user-management'] = array(
    'title' => 'User Management',
    'description' => 'Gigya Social Login settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_login_admin_form'),
    'access arguments' => array('administer gigya'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'gigya.admin.inc',
  );

  $items['admin/config/services/gigya/share'] = array(
    'title' => 'Share',
    'description' => 'Gigya Share settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_sharebar_settings_form'),
    'access arguments' => array('administer gigya'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'gigya.admin.inc',
  );

  // Add the comments component config tab.
  $items['admin/config/services/gigya/comments'] = array(
    'title' => 'Comments & Reviews',
    'description' => 'Gigya comments & reviews settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_comments_settings_form'),
    'access arguments' => array('administer gigya'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'gigya.admin.inc',
  );
  $items['admin/config/services/gigya/reactions'] = array(
    'title' => 'Reactions',
    'description' => 'Gigya Reactions settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_resctions_settings_form'),
    'access arguments' => array('administer gigya'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'gigya.admin.inc',
  );

  // Add the Gamification component config tab.
  $items['admin/config/services/gigya/gamification'] = array(
    'title' => 'Gamification',
    'description' => 'Gigya Gamification settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_gm_settings_form'),
    'access arguments' => array('administer gigya'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'gigya.admin.inc',
  );

  // Add the Activity Feed component config tab.
  $items['admin/config/services/gigya/activity-feed'] = array(
    'title' => 'Activity Feed',
    'description' => 'Gigya Activity Feed settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_activity_feed_settings_form'),
    'access arguments' => array('administer gigya'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 6,
    'file' => 'gigya.admin.inc',
  );
  // Add the comments component ajax callback.
  $items['gigya/comments'] = array(
    'title' => 'comments ajax',
    'page callback' => 'gigya_comments_ajax',
    'access arguments' => array('access content'),
    'file' => 'includes/gigya_comments.inc',
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/friends'] = array(
    'title' => 'My Friends',
    'page callback' => 'gigya_get_friends',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'gigya.pages.inc',
  );
  $items['user/%user/gigyainfo'] = array(
    'title' => 'Gigya User Info (debug)',
    'page callback' => 'gigya_get_user',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(1),
    'access callback' => 'gigya_menu_access_user_debug',
    'access arguments' => array(),
    'file' => 'gigya.pages.inc',
  );
  $items['user/%user/edit/gigya'] = array(
    'title' => 'Social Networks',
    'page callback' => 'gigya_connect',
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'load arguments' => array('%map', '%index'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'gigya.pages.inc',
  );
  $items['gigya/socialize-register-ajax'] = array(
    'type' => MENU_CALLBACK,
    'title' => '',
    'access arguments' => array('access content'),
    'page callback' => 'gigya_register_ajax',
    'description' => 'Gigya Registration.',
    'file' => 'gigya.pages.inc',
  );
  $items['socialize-login'] = array(
    'page callback' => 'gigya_login_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
    'file' => 'gigya.pages.inc',
  );
  $items['raas-login'] = array(
    'page callback' => 'gigya_raas_login_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
    'file' => 'gigya.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function gigya_block_info() {
  $blocks = array();
  $blocks['gigya-login'] = array(
    'info' => t('Gigya login'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['gigya-rass'] = array(
    'info' => t('Gigya RaaS links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['gigya_raas_login'] = array(
    'info' => t('Gigya RaaS Login'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['gigya_raas_register'] = array(
    'info' => t('Gigya RaaS Register'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['gigya_raas_profile'] = array(
    'info' => t('Gigya RaaS Profile'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['gigya-connect'] = array(
    'info' => t('Gigya connectUI'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['gigya_activity_feed'] = array(
    'info' => t('Gigya Activity Feed'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $gm_blocks = variable_get('gigya_gm_blobks', array());
  if (!empty($gm_blocks)) {
    foreach ($gm_blocks as $block_id => $gm_block) {
      $blocks[$block_id] = array(
        'info' => $gm_block['block_name'],
        'cache' => DRUPAL_CACHE_PER_PAGE,
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function gigya_block_view($delta) {
  $gm_blocks = variable_get('gigya_gm_blobks', array());
  switch ($delta) {
    case 'gigya-login':
      $gigya_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
      if ($gigya_mode !== 'raas') {
        $form_id = ($gigya_mode !== 'gigya') ? 'user_login_block' : NULL;
        return array(
          'content' => theme('gigya_login_block', array('form_id' => $form_id, 'suppress_title' => TRUE)),
        );
      }
      break;

    case 'gigya-connect':
      return array(
        'subject' => t('Social network connections'),
        'content' => theme('gigya_connect_display'),
      );

    case 'gigya_activity_feed':
      if (variable_get('gigya_activety_feed_enable', FALSE)) {
        $gigya_activity_feed_js = array(
          'containerID' => variable_get('gigya_activety_feed_container_id', 'ActivityFeedDiv'),
          'tabOrder' => variable_get('gigya_activety_feed_tabs', 'everyone,friends,me'),
          'siteName' => variable_get('site_name', ''),
          'width' => variable_get('gigya_activety_feed_width', '309'),
          'height' => variable_get('gigya_activety_feed_height', '270'),
          'context' => array('id' => variable_get('gigya_activety_feed_container_id', 'ActivityFeedDiv')),
        );
        // Allow other modules to change the settings.
        drupal_alter('gigya_activety_feed', $gigya_activity_feed_js);
        drupal_add_js(array('gigyaActivityFeed' => $gigya_activity_feed_js), 'setting');
        return array(
          'subject' => t('Activity feed'),
          'content' => theme('gigya_activity_feed_block'),
        );
      }
    case 'gigya-rass':
      drupal_add_css(drupal_get_path('module', 'gigya') . '/css/gigya.css');
      $login_lable = variable_get('raas_login_label', 'Login');
      $reg_label = variable_get('raas_register_label', 'Register');
      $prof_lable = variable_get('raas_profile_label', 'Profile');
      if (user_is_logged_in()) {
        $links['profile'] = l($prof_lable, '', array(
            'attributes' => array(
              'class' => 'gigya-raas-prof',
              'id' => 'gigya-raas-prof',
            ),
            'fragment' => 'raas-profile',
          )
        );
      }
      else {
        $links = array(
          'login' => l($login_lable, '', array(
              'attributes' => array(
                'class' => 'gigya-raas-login',
                'id' => 'gigya-raas-login',
              ),
              'fragment' => 'raas-login',
            )
          ),
          'register' => l($reg_label, '', array(
              'attributes' => array(
                'class' => 'gigya-raas-reg',
                'id' => 'gigya-raas-reg',
              ),
              'fragment' => 'raas-register',
            )
          ),
        );
      }
      return array(
        'subject' => t('Gigya Login'),
        'content' => theme('gigya_raas_block', array('links' => $links)),
      );

    case 'gigya_raas_login':
      return array(
        'subject' => t('Gigya RaaS Login'),
        'content' => '<div id="gigya-raas-login-div"></div>',
      );

    case 'gigya_raas_register':
      return array(
        'subject' => t('Gigya RaaS Register'),
        'content' => '<div id="gigya-raas-register-div"></div>',
      );

    case 'gigya_raas_profile':
      return array(
        'subject' => t('Gigya RaaS Profile'),
        'content' => '<div id="gigya-raas-profile-div"></div>',
      );
  }
  // GM blocks.
  if (user_is_logged_in()) {
    if (array_key_exists($delta, $gm_blocks) && variable_get('gigya_gm_enable', FALSE)) {
      return array(
        'subject' => $gm_blocks[$delta]['block_name'],
        'content' => gigya_gm_build_block($gm_blocks[$delta]),
      );
    }
  }
}

/**
 * Builds GM blocks HTML.
 *
 * @param $block_settings.
 *
 * @return string
 *   returns the block HTML.
 */
function gigya_gm_build_block($block_settings) {
  // Build html.
  $comps = $block_settings['componentes'];
  $comps = array_reverse($comps);
  uasort($comps, 'drupal_sort_weight');
  $out = '<div id="' . drupal_html_id($block_settings['block_name']) . '">';
  $block_id = $block_id = str_replace(' ', '_', $block_settings['block_name']);
  $js_block_name = lcfirst(implode('', array_map('ucwords', explode('_', $block_id))));
  $js_array = array();
  foreach ($comps as $key => $comp) {
    if (!empty($comp['enable'])) {
      $out .= '<div id="' . $comp['div-id'] . '"></div>';
      // camelCase for js.
      $js_key = lcfirst(implode('', array_map('ucwords', explode('_', $key))));
      $js_array[$js_key . 'Params'] = array('containerID' => $comp['div-id']);
      if ($key == 'leaderboard') {
        $js_array[$js_key . 'Params']['period'] = variable_get('gigya_gm_leaderboard_period', '7day');
        $js_array[$js_key . 'Params']['totalCount'] = variable_get('gya_gm_total_count', '12');
      }
    }
  }
  drupal_alter('gigya_gm_block', $js_array, $js_block_name);
  drupal_add_js(array('gigyaGM' => array($js_block_name => $js_array)), 'setting');
  $out .= '</div>';
  return $out;
}

/**
 * Implements hook_user_load().
 */
function gigya_user_load($users) {
  foreach ($users as $account) {
    GigyaUser::load($account);
  }
}

/**
 * Implements hook_user_logout().
 */
function gigya_user_logout($account) {
  if (isset($account->gigya)) {
    user_cookie_save(array('gigya' => 'gigyaLogOut'));
  }
}

/**
 * Implements hook_user_insert().
 */
function gigya_user_insert(&$edit, $account, $category) {
  $login_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
  if ($login_mode === 'drupal_and_gigya' || $login_mode === 'gigya') {
    global $base_url;
    module_load_include('inc', 'gigya');
    // Only link accounts if the user running this code has evidence of a
    // Gigya login in the URL.
    if (isset($_SESSION['gigya_uid'])) {
      $_gigya_user = new GigyaUser($_SESSION['gigya_uid']);
      unset($_SESSION['gigya_uid']);

      // We can suppress the notify login JS because,
      // the user is clearly already logged into Gigya.
      $_SESSION['gigya_suppress_notifylogin_js'] = TRUE;
      // Create profile2
      if (module_exists('gigya_profile2')) {
        gigya_profile2_create_user_profile($account->uid, $_gigya_user);
      }
      $gigya_user_info = array(
        'email' => $account->mail,
        'nickname' => $account->name,
      );
      $_gigya_user->notifyRegistration($account->uid);
    }
    else {
      $gigya_user_info = array(
        'email' => $account->mail,
        'nickname' => $account->name,
      );
      $user_info = drupal_json_encode($gigya_user_info);
      gigya_notify_login($account->uid, TRUE, $user_info);
    }
  }
}

/**
 * Implements hook_user_login().
 */
function gigya_user_login(&$edit, $account) {
  $login_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
  if ($login_mode === 'drupal_and_gigya' || $login_mode === 'gigya') {
    if (empty($_SESSION['gigya_suppress_notifylogin_js'])) {
      $gigya_user_info = array(
        'email' => $account->mail,
        'nickname' => $account->name,
      );

      /* Allow other modules to add info valid fields are nickname, photoURL,
      thumbnailURL, firstName, lastName, gender, age, email. */
      drupal_alter('gigya_notify_login_user_info', $gigya_user_info);
      $user_info = drupal_json_encode($gigya_user_info);
      gigya_notify_login($account->uid, FALSE, $user_info);
    }
  }
  /* We only want to let admin user and users with the
  "bypass_gigya_raas" permission to login via standard drupal login. */
  elseif ($login_mode == 'raas' && ($account->uid > 1 && !user_access('bypass_gigya_raas', $account))) {
    global $_gigya_raas_login;
    // If user didn't login via RaaS.
    if (!$_gigya_raas_login) {
      // Query Gigya to make sure that only users
      // that are in Gigya can login excluding admin user.
      // @ignore sql_curly
      $query = 'select UID from accounts where loginIDs.emails = ' . $account->mail;
      $res = _gigya_api('accounts.search', array('query' => $query));
      if (empty($res['results'])) {
        watchdog('gigya_raas', 'User with email ' . $account->mail . 'could not be found in the Gigya database', NULL, WATCHDOG_INFO);
        $account->status = 0;
        user_save($account);
        if (user_is_logged_in()) {
          require_once drupal_get_path('module', 'user') . '/user.pages.inc';
          user_logout();
        }
        drupal_set_message(t('Your account was disabled please register for a new one.'));
      }
    }
    else {
      if (!empty($_SESSION['gigya_raas_uid'])) {
        $res = _gigya_api('accounts.getAccountInfo', array('UID' => $_SESSION['gigya_raas_uid']));
        $account->raas_account = $res;
      }

    }
  }
}

/**
 * Implements hook_user_delete().
 */
function gigya_user_delete($account) {
  $login_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
  if ($login_mode === 'drupal_and_gigya' || $login_mode === 'gigya') {
    module_load_include('inc', 'gigya');
    gigya_delete_account($account->uid);
  }
}

/**
 * Implements hook_user_categories().
 */
function gigya_user_categories() {
  global $base_url, $user;

  module_load_include('inc', 'gigya');
  return array(
    array(
      'name' => 'gigya',
      'title' => t('Social Networks'),
      'weight' => 10,
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
    ),
  );
}

/**
 * Implements hook_user_view().
 */
function gigya_user_view($account, $view_mode) {
  global $base_url, $user;
  module_load_include('inc', 'gigya');
  $content = '';
  $_gigya_user = new GigyaUser($account->uid);
  $bio = $_gigya_user->getUserInfo();
  if (!empty($bio['identities'])) {
    foreach ($bio['identities'] as $network) {
      $account->content['gigya'][$network['provider']] = array(
        '#type' => 'user_profile_category',
        '#title' => t('!social profile', array('!social' => $network['provider'])),
        '#weight' => 0,
      );
      $account->content['gigya'][$network['provider']]['bio'] = array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => theme('gigya_user_profile', array('bio' => $network)),
      );
    }
  }
  else {
    if ((empty($bio['isConnected']) || ($bio['isConnected'] == 'FALSE') || !($bio['isConnected'])) && $user->uid == $account->uid) {
      $account->content['gigya']['no_networks'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('Social Networks'),
      );

      $account->content['gigya']['no_networks']['no_network'] = array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => t('You are currently not connected to any social network. !connect', array('!connect' => l(t('Click here to connect to a social network'), 'user/' . $account->uid . '/edit/gigya'))),
      );
    }
  }
}

/**
 * Implements hook_user_operations().
 */
function gigya_user_operations() {
  return array(
    'gigya_unlink' => array(
      'label' => 'Remove Gigya Linkages',
      'callback' => 'gigya_delete_account_bulk',
    ),
  );
}

/**
 * Deletes an array of user accounts.
 *
 * @param array $accounts
 *   Array of Drupal UIDs to be unlinked from Gigya.
 *
 * @TODO: Perhaps follow the same pattern used in core: @link
 * http://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_delete/7
 * @endlink i.e. gigya_delete_account(), gigya_delete_account_multiple().
 */
function gigya_delete_account_bulk($accounts) {
  if (is_array($accounts)) {
    foreach ($accounts as $account) {
      if ($account = user_load($account)) {
        GigyaUser::load($account);
        $account->gigya->deleteAccount();
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function gigya_form_alter(&$form, $form_state, $form_id) {
  $hide_title = variable_get('gigya_login_hide_title', FALSE);

  // Modify the user registration form.
  $gigya_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
  if ($form_id == 'user_register_form' && ($gigya_mode == 'drupal_and_gigya' || $gigya_mode == 'gigya')) {
    module_load_include('inc', 'gigya');
    module_load_include('.inc', 'user', 'user.pages');

    // If they haven't logged into Gigya and they're not already logged in
    // simply add the Gigya login block.
    if (!user_is_logged_in() && empty($form_state['gigya'])) {
      if ($gigya_mode !== 'drupal') {
        $form['gigya'] = array(
          '#markup' => theme('gigya_login_block', $variables = array(
              'form_id' => $form_id,
              'suppress_title' => $hide_title,
            )
          ),
          '#weight' => -100,
        );
      }
    }

    if (!empty($form_state['gigya'])) {
      form_clear_error();
      drupal_get_messages('error');
      $form['account']['pass']['#type'] = 'hidden';
      $form['account']['pass']['#value'] = user_password();
      $form['account']['mail']['#type'] = 'hidden';
      $form['account']['name']['#type'] = 'hidden';
      $form['account']['message'] = array(
        '#markup' => t('Additional information is required in order to complete your registration. Please fill-in the following info:'),
      );
      $form['gigya_uid'] = array(
        '#type' => 'hidden',
        '#attributes' => array('class' => 'gigyaUid'),
      );
      $form['actions']['submit']['#ajax'] = array(
        'callback' => 'gigya_register_ajax',
      );
    }
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'gigya') . '/css/gigya.css',
    );
  }

  // Modify the user login page.
  $gigya_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
  if ($form_id == 'user_login' && ($gigya_mode == 'drupal_and_gigya' || $gigya_mode == 'gigya')) {
    module_load_include('inc', 'gigya');
    if ($gigya_mode !== 'drupal') {
      $form['gigya'] = array(
        '#markup' => theme('gigya_login_block', $variables = array(
            'form_id' => $form_id,
            'suppress_title' => $hide_title,
          )
        ),
        '#weight' => -100,
      );
    }
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'gigya') . '/css/gigya.css',
    );
  }

  // Modify the user login block.
  if ($form_id == 'user_login_block') {
    module_load_include('inc', 'gigya');
    $gigya_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
    if ($gigya_mode == 'gigya') {
      unset($form['name']);
      unset($form['pass']);
      unset($form['actions']);
      unset($form['links']);
      $hide_title = FALSE;
    }
    if ($gigya_mode !== 'drupal') {
      $form['gigya'] = array(
        '#markup' => theme('gigya_login_block', $variables = array(
            'form_id' => $form_id,
            'suppress_title' => $hide_title,
          )
        ),
        '#weight' => -100,
      );
    }
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'gigya') . '/css/gigya.css',
    );
  }

  // Modify the Gigya administration form.
  if ($form_id == 'gigya_admin_form') {
    variable_get('need_validation_msg', FALSE);
    unset($form['buttons']['reset']);
  }

  if ($form_id == 'user_pass') {
    $form['actions']['submit']['#value'] = t('Reset password');
  }
  return $form;
}

/**
 * Implements hook_action_info().
 */
function gigya_action_info() {
  $info = array();

  $info['gigya_shareui_node_action'] = array(
    'type' => 'node',
    'label' => t('Share node data via Gigya'),
    'configurable' => TRUE,
    'triggers' => array(
      'node_insert',
      'node_update',
      'node_delete',
      'node_presave',
    ),
  );
  $info['gigya_shareui_user_action'] = array(
    'type' => 'user',
    'label' => t('Share user data via Gigya'),
    'configurable' => TRUE,
    'triggers' => array(
      'user_insert',
      'user_update',
      'user_login',
      'user_logout',
      'user_delete',
    ),
  );
  $info['gigya_shareui_comment_action'] = array(
    'type' => 'comment',
    'label' => t('Share comment data via Gigya'),
    'configurable' => TRUE,
    'triggers' => array(
      'comment_insert',
      'comment_update',
    ),
  );
  $info['gigya_delete_account_action'] = array(
    'type' => 'user',
    'label' => t('Delete account from Gigya'),
    'configurable' => FALSE,
    'triggers' => array('user'),
  );
  return $info;
}

/**
 * Implements hook_node_view().
 */
function gigya_node_view($node, $view_mode, $langcode) {
  gigya_add_comments_ui($node);
}


/**
 * Implements hook_node_view_alter().
 */
function gigya_node_view_alter(&$build) {
  // Check if comments component is enabled.
  if (_gigya_is_component_enabled('comments')) {
    // Remove the drupal add comment link.
    unset($build['links']['comment']['#links']['comment-add']);
    $unset = variable_get('gigya_comments_hide_drupal_comments', TRUE);
    if ($unset) {
      // If we have comments removed them.
      if (!empty($build['comments'])) {
        $id = variable_get('gigya_comments_container', 'comments');
        unset($build['comments']);
        $build['comments']['#markup'] = '<div id="' . $id . '"></div>';
      }
    }
  }
}

/**
 * Action to remove a user's Gigya linkages.
 *
 * @param object $user
 *   The user to delete.
 * @param array $context
 *   Unused param, the drupal action module need to pass it,
 *   but we have no use for it.
 */
function gigya_delete_account_action($user, $context = array()) {
  $account = user_load($user->uid);
  $account->gigya->deleteAccount();
}

/**
 * Defines action tokens.
 *
 * @param string $object_type
 *   The object type could by 'node' or 'nodeapi' or 'comment' or 'user'.
 *
 * @return array
 *   An array containing the types of action tokens to display.
 */
function gigya_action_tokens($object_type) {
  if ($object_type == 'nodeapi' || $object_type == 'node') {
    return array('node');
  }
  elseif ($object_type == 'comment') {
    return array('node', 'comment');
  }
  elseif ($object_type == 'user') {
    return array('user');
  }
}

/**
 * Defines basic Gigya token replacement patterns.
 *
 * @param string $type
 *   The object type could by 'node' or 'nodeapi' or 'comment' or 'user'.
 * @param object $object
 *   The object 'node' or 'comment' or 'user'
 * @param bool $help
 *   Used to know if we need to return the help table, or the data.
 *
 * @return array|string
 *   Help table if help == true, or array of the tokens if not.
 */
function gigya_replacements($type, $object = NULL, $help = FALSE) {
  global $user;
  switch ($type) {
    case 'node':
    case 'nodeapi':
      if ($help) {
        return theme('table', array(
            'header' => array('Pattern', 'Value'),
            'rows' => array(
              array(
                array(
                  'data' => 'Basic replacement patterns',
                  'colspan' => 2,
                  'class' => 'region',
                ),
              ),
              array('!title', 'node title'),
              array('!url', 'node url'),
              array('!teaser', 'node teaser'),
              array('!user', 'Drupal user who performed the action'),
              array('{actor}', 'user\'s remote social network username, linked to their profile'),
            ),
          )
        );
      }
      else {
        return array(
          '!title' => $object->title,
          '!url' => url('node/' . $object->nid, array('absolute' => TRUE, 'alias' => TRUE)),
          '!user' => $user->name,
          '!teaser' => filter_xss($object->body['und'][0]['summary']),
        );
      }
      break;

    case 'user':
      if ($help) {
        return theme('table', array(
            'header' => array('Pattern', 'Value'),
            'rows' => array(
              array(
                array(
                  'data' => 'Basic replacement patterns',
                  'colspan' => 2,
                  'class' => 'region',
                ),
              ),
              array('!name', 'name of user profile acted on'),
              array('!profile', 'profile url'),
              array('!user', 'user who performed the action'),
              array('{actor}', 'user\'s remote social network username, linked to their profile'),
            ),
          )
        );
      }
      else {
        return array(
          '!name' => $object->name,
          '!profile' => url('user/' . $object->uid, array('absolute' => TRUE, 'alias' => TRUE)),
          '!user' => $user->name,
        );
      }
      break;

    case 'comment':
      if ($help) {
        return theme('table', array(
            'header' => array('Pattern', 'Value'),
            'rows' => array(
              array(
                array(
                  'data' => 'Basic replacement patterns',
                  'colspan' => 2,
                  'class' => 'region',
                ),
              ),
              array('!author', 'comment author'),
              array('!subject', 'comment subject'),
              array('!comment', 'comment body'),
              array('!url', 'comment url'),
              array('!user', 'user who performed the action'),
              array('{actor}', 'user\'s remote social network username, linked to their profile'),
            ),
          )
        );
      }
      else {
        return array(
          '!author' => $object->author,
          '!subject' => $object->subject,
          '!comment' => $object->comment,
          '!url' => url('node/' . $object->nid, array('absolute' => TRUE, 'alias' => TRUE)),
          '!user' => $user->name,
        );
      }
      break;
  }
}

/**
 * Returns HTML for the Gigya connect UI.
 *
 * @ingroup themeable
 */
function theme_gigya_connect_display() {
  if (user_is_logged_in()) {
    return gigya_connectui_js();
  }
}

/**
 * Returns HTML for the Gigya friends list.
 *
 * @param array $variables
 *   An associative array containing:
 *   - friends : An array of friend associative array.
 *
 * @return string
 *   A HTML string of friends list.
 * @ingroup themeable
 */
function theme_gigya_friends($variables) {
  $friends = $variables['friends'];
  global $user, $base_url;
  $content = '';

  $content .= '<div id="gigya_friends">';
  $content .= '<table id="gigya_friends_table" style="border:0" cellpadding="0" cellspacing="0">';
  $content .= '<tr class="gigya table">';
  $friend_count = count($friends);

  $rows = $friend_count / 5;
  $tail = $friend_count % 5;
  $rowcount = 1;
  $colcount = 0;
  foreach ($friends as $friend) {
    $colcount++;
    if (isset($friend['thumbnailURL'])) {
      $friend_photo = $friend['thumbnailURL'];
    }
    elseif (isset($friend['photoURL'])) {
      $friend_photo = $friend['photoURL'];
    }
    else {
      $friend_photo = $base_url . '/' . drupal_get_path('module', 'gigya') . '/silhouette.gif';
    }
    $friend_link = l($friend['nickname'], 'user/' . $friend['UID']);
    $content .= '<td width="20%" class="friend_bio"><img width="50" height="50" src="' . $friend_photo . '" /><br /><span class="friend_nickname">' . $friend_link . '</span></td>';
    if (($colcount * $rowcount) == $friend_count) {
      $remainder = 5 - $colcount;
      $content .= '<td width="' . (20 * $remainder) . '% colspan="' . $remainder . '">&nbsp;</td></tr>';
    }
    elseif ($colcount == 5) {
      $content .= '</tr><tr class="gigya table">';
      $rowcount++;
      $colcount = 0;
    }
  }
  if ($colcount == 0 && $rowcount == 1) {
    $content .= '<td><span class="gigya no-friends">' . t('You currently have no social network friends connected to this site. !connect', array('!connect' => l(t('Have you connected to a social network?'), 'user/' . $user->uid . '/edit/gigya'))) . '</span></td></tr>';
  }
  $content .= '</table>';
  $content .= '</div>';

  return $content;
}

/**
 * Process variables for gigya-link-accounts.tpl.php.
 *
 * @param array $variables
 *   The variables.
 *
 * @see gigya-link-accounts.tpl.php
 */
function template_preprocess_gigya_link_accounts(&$variables) {
  $parms = $_GET;
  unset($parms['q']);
  if (!empty($parms['email'])) {
    $variables['form_title'] = t('The Email provided is already in use. If you want to link to an existing account, please provide your username and password.');
  }
  else {
    $variables['form_title'] = t('The Email provided is already in use. If you want to link to an existing account, please provide your username and password. If you wish to create a new account, please click the link at the bottom and choose a different Email address.');
  }
  $variables['password_link'] = l(t('Forgot your password?'), 'user/password', array('query' => $parms));
}

/**
 * Process variables for gigya-register.tpl.php.
 *
 * @param array $variables
 *   $bio: Gigya user object.
 *   $registration_form: Drupal user registration form.
 *   $link_accounts_form: Gigya link accounts form.
 *
 * @see gigya-register-form.tpl.php
 */
function template_preprocess_gigya_register(&$variables) {
  if (!empty($variables['registration_form'])) {
    $variables['title'] = t('Complete your registration');
    $variables['message'] = t('You have been authenticated via %provider. Please complete your registration below.', array('%provider' => $variables['bio']['loginProvider']));
  }
  else {
    $variables['title'] = t('Allready a Member');
    $variables['message'] = '';
  }
}

/**
 * Process variables for gigya-login-block.tpl.php.
 *
 * @param array $variables
 *   $form_id
 *   $suppress_title
 *
 * @see gigya-login-block.tpl.php
 */
function template_preprocess_gigya_login_block(&$variables) {
  if (_gigya_is_component_enabled('login')) {
    $variables['login_div'] = gigya_loginui_js();
    if (!$variables['suppress_title']) {
      $variables['title'] = t('Login using social networks');
    }
  }
}

/**
 * Process variables for gigya_user-profile.tpl.php.
 *
 * @param array $variables
 *   $bio
 *
 * @see gigya-user-profile.tpl.php
 */
function template_preprocess_gigya_user_profile(&$variables) {
  global $base_url;
  $bio = $variables['bio'];
  $bio['nickname'] = !empty($bio['nickname']) ? $bio['nickname'] : 'N/A';
  $bio['profileURL'] = !empty($bio['profileURL']) ? $bio['profileURL'] : '';

  // Figure out what to print for the picture.
  if (!empty($bio['thumbnailURL'])) {
    $variables['photo'] = theme('image', array(
        'path' => $bio['thumbnailURL'],
        'width' => 'Photo of' . $bio['nickname'],
        'height' => 'Photo of' . $bio['nickname'],
        'alt' => array('id' => 'photo'),
        'title' => FALSE,
      )
    );
  }
  elseif (!empty($bio['photoURL'])) {
    $variables['photo'] = theme('image', array(
        'path' => $bio['photoURL'],
        'width' => 'Photo of' . $bio['nickname'],
        'height' => 'Photo of' . $bio['nickname'],
        'alt' => array('id' => 'photo'),
        'title' => FALSE,
      )
    );
  }
  // If nothing else, then use the default avatar image.
  else {
    $variables['photo'] = theme('image', array(
        'path' => drupal_get_path('module', 'gigya') . '/silhouette.gif',
        'width' => 'Photo of' . $bio['nickname'],
        'height' => 'Photo of' . $bio['nickname'],
        'alt' => array('id' => 'photo'),
        'title' => FALSE,
      )
    );
  }

  // Print out the user nickname.
  $variables['name'] = $bio['profileURL'] ? l($bio['nickname'], $bio['profileURL']) : $bio['nickname'];

}

/**
 * Modifies the login block title if Gigya is suppressing Drupal's core login.
 */
function gigya_preprocess_block(&$vars) {
  if ($vars['block']->delta == 'login') {
    $gigya_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
    if ($gigya_mode == 'drupal_and_gigya' || $gigya_mode == 'gigya') {
      $vars['block']->subject = NULL;
    }
  }
}

/**
 * Form builder for the account linking form.
 *
 * @see gigya_link_accounts_form_submit()
 */
function gigya_link_accounts_form($form, &$form_state) {

  $form['message'] = array(
    '#markup' => t('Your Email address: @EMAIL_ADDRESS already exists.<br \> If you have previously registered, please login with your site credentials to link the accounts.<br \> Otherwise, please use a different Email address.<br \><br \>', array('@EMAIL_ADDRESS' => $form_state['email'])),
    '#weight' => -1,
  );
  $form['link_accounts']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 60,
    '#maxlength' => USERNAME_MAX_LENGTH,
    '#required' => TRUE,
    '#description' => t('Enter your @site username.', array('@site' => variable_get('site_name', 'Drupal'))),
  );

  $form['link_accounts']['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Enter your password.'),
    '#required' => TRUE,
  );
  $form['gigya_uid'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => 'gigyaUid'),
  );
  $form['#validate'] = user_login_default_validators();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Log in'),
    '#weight' => 2,
    '#ajax' => array(
      'callback' => 'gigya_link_accounts_form_submit',
    ),
  );
  $form['reg_link'] = array(
    '#markup' => t('Otherwise, please  go !back and use a different set of credentials to login', array('!back' => '<a class="close-modal" href="#">back</a>')),
    '#weight' => 3,
  );
  return $form;
}

/**
 * Form submission handler for gigya_link_accounts_form().
 *
 * @see gigya_link_accounts_form()
 */
function gigya_link_accounts_form_submit(&$form, &$form_state) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_add_js('ajax-responder');
  $errors = form_get_errors();
  if (!empty($errors)) {
    $msg = "";
    foreach ($errors as $err) {
      $msg .= $err . "\n";
    }
    return ctools_ajax_render_error($msg);
  }
  global $user;
  $user = user_load($form_state['uid']);
  if (!empty($user->uid)) {
    user_login_finalize($form_state);
    $gigya_user = new GigyaUser($form_state['values']['gigya_uid']);
    $gigya_user->notifyRegistration($user->uid);
  }
  $dest = variable_get('gigya_login_uiconfig_urlredirect', '');
  if (!empty($dest)) {
    $commands[] = ctools_ajax_command_redirect($dest);
  }
  else {
    $commands[] = ctools_ajax_command_reload();
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Gigya JavaScript settings for loginUI.
 *
 * Loads up the needed capabilities and variables for loginUI parameters.
 *
 * @return string
 *   The basic login ui if the gigya_login_advanced_raw variable
 *   is empty or the advanced login ui if not.
 */
function gigya_loginui_js() {
  drupal_add_library('system', 'drupal.ajax');
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  static $index = 0;
  $width = variable_get('gigya_login_plugin_width', GIGYA_DEFAULT_LOGINUI_WIDTH);
  $hieght = variable_get('gigya_login_plugin_height', GIGYA_DEFAULT_LOGINUI_HEIGHT);
  $gigya_login_params = array(
    'containerID' => variable_get('gigya_login_uiconfig_containerID', GIGYA_DEFAULT_LOGINUI_CONTAINERID),
    'buttonsStyle' => variable_get('gigya_login_buttons_style', 'standard'),
    'showTermsLink' => variable_get('gigya_login_uiconfig_terms', FALSE),
    'width' => GIGYA_DEFAULT_LOGINUI_WIDTH,
    'height' => GIGYA_DEFAULT_LOGINUI_HEIGHT,
  );
  if (variable_get('gigya_login_plugin_size', FALSE)) {
    $gigya_login_params['width'] = (int) $width;
    $gigya_login_params['height'] = (int) $hieght;
  }
  if ($index > 0) {
    $gigya_login_params['containerID'] = variable_get('gigya_login_uiconfig_containerID', GIGYA_DEFAULT_LOGINUI_CONTAINERID) . '-' . $index;
  }
  // Merge configuration from advanced configuration.
  $extra_login = variable_get('gigya_login_extra', array());
  if (!empty($extra_login)) {
    foreach ($extra_login as $key => $parm) {
      $gigya_login_params[$key] = gigya_json_to_php($parm);
    }
  }

  // Allow modules to alter the object before adding the JS to the page.
  drupal_alter('gigya_loginui', $gigya_login_params);

  drupal_add_js(array('gigya' => array('loginUIParams' => array($index => $gigya_login_params))), 'setting');
  drupal_add_js(array('gigya' => array('loginDestination' => url('socialize-login', array('absolute' => TRUE)))), 'setting');

  $index++;
  return '<div class="gigya-social-login" id="' . $gigya_login_params['containerID'] . '"></div>';
}


/**
 * Gigya JavaScript settings for connectUI.
 *
 * Loads up the needed capabilities and variables for connectUI parameters.
 *
 * @return string
 *   The basic Gigya connect UI if the gigya_connect_uiconfig_raw variable is
 */
function gigya_connectui_js() {
  $gigya_connect_params = array(
    'headerText' => variable_get('gigya_connect_uiconfig_captionText', GIGYA_DEFAULT_CONNECTUI_CAPTIONTEXT),
    'width' => (int) variable_get('gigya_connect_uiconfig_width', GIGYA_DEFAULT_CONNECTUI_WIDTH),
    'height' => (int) variable_get('gigya_connect_uiconfig_height', GIGYA_DEFAULT_CONNECTUI_HEIGHT),
    'containerID' => variable_get('gigya_connect_uiconfig_containerID', GIGYA_DEFAULT_CONNECTUI_CONTAINERID),
    'showTermsLink' => variable_get('gigya_connect_uiconfig_terms', TRUE),
    'requiredCapabilities' => 'login, friends',
  );
  $gigya_connect_params['containerID'] = variable_get('gigya_connect_uiconfig_containerID', GIGYA_DEFAULT_CONNECTUI_CONTAINERID);
  // Allow modules to alter the object before adding the JS to the page.
  drupal_alter('gigya_connectui', $gigya_connect_params);
  drupal_add_js(array('gigya' => array('connectUIParams' => $gigya_connect_params)), 'setting');
  return '<div id="' . $gigya_connect_params['containerID'] . '"></div>';
}

/**
 * Implements hook_rules_file_info().
 */
function gigya_rules_file_info() {
  return array('includes/gigya.rules');
}

/**
 * Implements hook_tokens().
 */
function gigya_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'gigya') {
    module_load_include('inc', 'gigya');
    $gigya_fields = _gigya_get_profile_fields();
    $replacements = array();
    $login_mode = variable_get('gigya_login_mode', 'drupal_and_gigya');
    if ($login_mode == 'raas') {
      if (!empty($_SESSION['gigya_raas_uid'])) {
        include_once dirname(__FILE__) . '/includes/GigyaAccount.inc';
        $gigya_account = & drupal_static(__FUNCTION__);
        if (!isset($gigya_account)) {
          $gigya_account = new GigyaAccount($_SESSION['gigya_raas_uid']);
        }
        $gigya_user_info = $gigya_account->getProfile();
        $gigya_user_info['data'] = $gigya_account->getData();
      }
    }
    else {
      if (!empty($_SESSION['gigya_uid'])) {
        $gigya_user = new GigyaUser($_SESSION['gigya_uid']);
      }
      // Just in case the gigya object didn't get attached to the user object.
      if (empty($gigya_user)) {
        global $user;
        $gigya_user = new GigyaUser($user->uid);
      }
      $gigya_user_info = $gigya_user->getUserInfo();
    }

    $sanitize = !empty($options['sanitize']);
    // D7 token api sends replacements through this function-- so now it's
    // slightly different, and inefficient probabaly could be refactored.
    foreach ($tokens as $name => $original) {
      $gigya_key = str_replace('gigya-', '', $name);
      if (isset($gigya_user_info[$gigya_key]) && is_string($gigya_user_info[$gigya_key])) {
        $replacements[$original] = $sanitize ? check_plain($gigya_user_info[$gigya_key]) : $gigya_user_info[$gigya_key];
      }
      else {
        $replacements[$original] = NULL;
      }
    }
    // Allow other modules to add/change the tokens.
    drupal_alter('gigya_tokens', $replacements, $tokens, $gigya_user_info);
    return $replacements;
  }
}

/**
 * Implements hook_token_info().
 */
function gigya_token_info() {
  module_load_include('inc', 'gigya');
  $gigya_fields = _gigya_get_profile_fields();
  $gigya_tokens = array();

  $types['gigya'] = array(
    'name' => t("Gigya User Information"),
    'description' => t("Tokens for user information from Gigya"),
  );

  foreach ($gigya_fields as $gigya_field_key => $gigya_field_value) {
    $gigya_tokens['gigya-' . $gigya_field_key] = array(
      'name' => check_plain($gigya_field_key),
      'description' => check_plain($gigya_field_value),
    );
  }

  return array(
    'types' => $types,
    'tokens' => array(
      'gigya' => $gigya_tokens,
    ),
  );
}

/**
 * Include Gigya .inc files as necessary.
 */
function gigya_include($file) {
  ctools_include($file, 'gigya');
}

/**
 * Access callback for user/%user/gigyainfo menu item.
 *
 * Checks if the user is on their own account page and if so set the access
 * callback to check if they have devel information access.
 */
function gigya_menu_access_user_debug() {
  global $user;
  $account = clone $user;
  if (arg(1) == $account->uid) {
    return user_access('access devel information');
  }
}

/**
 * Helper function to make redirects.
 */
function gigya_redirect_to_complete_registration_page() {
  // Get the destinattion from the url query string.
  if (!empty($_GET['destinattion'])) {
    $dest = $_GET['destinattion'];
  }
  else {
    $dest = '<front>';
  }
  unset($_GET['destination']);
  drupal_goto('socialize-register', array(
      'query' => array(
        'signature' => $_GET['signature'],
        'UID' => $_GET['UID'],
        'timestamp' => $_GET['timestamp'],
        'destination' => $dest,
      ),
    )
  );
}

/**
 * Checks if the component is enabled.
 *
 * @param string $component
 *   The name of the component.
 *
 * @return bool
 *   if enabled.
 */
function _gigya_is_component_enabled($component) {
  return (bool) variable_get('gigya_' . $component . '_enabled', TRUE);
}

/**
 * Validates the key value format.
 *
 * @param array $element
 *   The element to validate.
 * @param array $form_state
 *   Form state.
 */
function gigya_key_val_filed_validate($element, &$form_state) {
  $values = gigya_values_string_to_array($element['#value']);
  if (!is_array($values)) {
    form_error($element, t('invalid input.'));
  }
  else {
    form_set_value($element, $values, $form_state);
  }
}

/**
 * Helper function to convert a text field key|value to an array.
 *
 * @param string $values
 *   The values to convert to array.
 *
 * @return array
 *   An associative array from the string.
 */
function gigya_values_string_to_array($values) {
  $lines = array();
  $values = explode("\n", $values);
  // Some clean up.
  $values = array_map('trim', $values);
  $values = array_filter($values, 'strlen');
  foreach ($values as $value) {
    preg_match('/(.*)\|(.*)/', $value, $matches);
    $lines[$matches[1]] = $matches[2];
  }
  return $lines;
}

/**
 * Convert Json string to php array.
 *
 * @param string $ent
 *   json string
 *
 * @return mixed
 *   Returns php array if json is valid.
 */
function gigya_json_to_php($ent) {
  return drupal_json_decode($ent);
}

/**
 * Helper function to convert an array to text field key|value.
 *
 * @param array $array_vals
 *   An array to join in to a string.
 *
 * @return string
 *   Returns a string in the format of key|val.
 */
function gigya_values_array_to_string($array_vals) {
  $lines = '';
  foreach ($array_vals as $key => $val) {
    $lines_array[] = "$key|$val";
  }
  $lines = implode($lines_array, "\n");
  return $lines;
}
