<?php
/**
 * @file
 * Module file.
 */

/**
 * Implements hook_menu().
 */
function crate_d2d_menu() {
  $items = array();
  return $items;
}

/**
 * Implements hook_theme_registry_alter.
 */
function crate_d2d_theme_registry_alter(&$theme_registry) {
  $theme_registry['migrate_ui_field_mapping_form']['function'] = 'crate_d2d_migrate_ui_field_mapping_form';
}

/**
 * Implements hook_form_alter.
 */
function crate_d2d_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'migrate_ui_edit_mappings') {
    _crate_d2d_alter_edit_mappings_form($form, $form_state);
  }
}

/**
 * Overrides the theming function for the migrate ui field mapping form.
 */
function crate_d2d_migrate_ui_field_mapping_form($variables) {
  $output = '';
  $form = $variables['field_mappings'];
  $elements = element_children($form);
  if (!empty($elements)) {
    $header = array(t('DNM'), t('Destination field'), t('Source field'),
      t('Default value'), t('Source migration'), t('Crate Extras'));
    $rows = array();
    foreach ($elements as $mapping_key) {
      $row = array();
      $title = $form[$mapping_key]['mapping']['#title'];
      unset($form[$mapping_key]['mapping']['#title']);
      $row[] = drupal_render($form[$mapping_key]['issue_group']);
      $row[] = $title;
      $row[] = drupal_render($form[$mapping_key]['mapping']);
      $row[] = drupal_render($form[$mapping_key]['default_value']);
      $row[] = drupal_render($form[$mapping_key]['source_migration']);
      $row[] = drupal_render($form[$mapping_key]['crate_extras']);
      $rows[] = $row;
    }
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Overrides the submit for the ui_edit_mappings_form.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form State.
 */
function crate_d2d_migrate_ui_edit_mappings_form_submit(&$form, &$form_state) {
  $crate_extra_settings = array();

  $handler = CrateD2DMigrateHandler::getInstance(Migration::getInstance($form_state['values']['machine_name']));
  $existing_modifiers = $handler->getFieldModifiers();

  foreach ($form_state['values']['field_mappings'] as $machine_name => $fm) {
    if (!isset($crate_extra_settings[$fm['mapping']])) {
      $crate_extra_settings[$fm['mapping']] = array();
    }

    if (empty($fm['crate_extras'])) {
      continue;
    }

    $crate_extra_settings[$fm['mapping']][] = $fm['crate_extras'];
  }

  // Figure out which ones we need to add / update / remove
  foreach ($crate_extra_settings as $field_machine_name => $values) {
    if (!isset($existing_modifiers[$field_machine_name])) {
      $existing_modifiers[$field_machine_name] = array();
    }

    $add_modifiers = array_diff($values, $existing_modifiers[$field_machine_name]);
    $remove_modifiers = array_diff($existing_modifiers[$field_machine_name], $values);

    $handler->addFieldModifiers($field_machine_name, $add_modifiers)
            ->removeFieldModifiers($field_machine_name, $remove_modifiers);
  }

  migrate_ui_edit_mappings_submit($form, $form_state);
}

function _crate_d2d_alter_edit_mappings_form(&$form, &$form_state) {
  /** @var Migration $migration */
  $migration = Migration::getInstance($form['machine_name']['#value']);

  $handler = CrateD2DMigrateHandler::getInstance(Migration::getInstance($form['machine_name']['#value']));
  $existing_modifiers = $handler->getFieldModifiers();

  // Figure out if this content type supports fivestar, and if so add a shadow field.
  $arguments = $migration->getArguments();

  $rating = FALSE;

  if (isset($arguments['source_type'])) {
    // Query the Variable table for the presence of $fivestar
    $fs_var = Database::getConnection('default', $arguments['source_connection'])
                      ->select('variable', 'v')
                      ->fields('v', array('value'))
                      ->condition('name', 'fivestar_' . $arguments['source_type'])
                      ->execute()
                      ->fetchField();

    if (!empty($fs_var)) {
      $fs_var = unserialize($fs_var);

      if ($fs_var) {
        $rating = TRUE;
      }
    }
  }

  foreach ($form['field_mappings'] as $name => &$val) {
    if (!is_array($val) || $name[0] == '#') {
      continue;
    }

    $existing_mod = '';

    if ($rating) {
      $val['mapping']['#options']['rating'] = 'Rating (fivestar)';
    }

    if ($val['mapping']['#default_value'] >= 0 && isset($existing_modifiers[$val['mapping']['#default_value']])) {
      $existing_mod = $existing_modifiers[$val['mapping']['#default_value']];
    }

    $val['crate_extras'] = array(
      '#type'    => 'select',
      '#options' => array_merge(array('' => ''), CrateD2DMigrateHandler::getAvailableModifiers()),
      '#default_value' => !empty($existing_mod) ? current($existing_mod) : '',
    );
  }

  unset($val);

  $form['submit']['#submit'] = array('crate_d2d_migrate_ui_edit_mappings_form_submit');
}

/**
 * Overrides migrations.
 */
function _crate_d2d_override_migrations() {
  // Grab all migration classes and see if they have a replacement.
  $query = db_select('migrate_status', 'ms')
    ->fields('ms', array('machine_name', 'class_name'));

  $rows = $query->execute()->fetchAll();

  foreach ($rows as $row) {
    if ($replacement = CrateD2DStubResolver::getReplacedClass($row->class_name)) {
      db_query('UPDATE migrate_status SET class_name = :cn WHERE machine_name = :mn', array(
        ':cn' => $replacement,
        ':mn' => $row->machine_name,
      ));
    }
  }
}

function _crate_d2d_reverse_override_migrations() {
  // Grab all migration classes and see if they have a replacement.
  $query = db_select('migrate_status', 'ms')
    ->fields('ms', array('machine_name', 'class_name'));

  $rows = $query->execute()->fetchAll();

  foreach ($rows as $row) {
    if ($replacement = CrateD2DStubResolver::getReplacedClass($row->class_name)) {
      db_query('UPDATE migrate_status SET class_name = :cn WHERE machine_name = :mn', array(
        ':cn' => $replacement,
        ':mn' => $row->machine_name,
      ));
    }
  }
}