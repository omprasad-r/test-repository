<?php
/**
 * @file
 * Code for the wmg_magento_api feature.
 */

include_once 'wmg_magento_api.features.inc';

/**
 * Implements hook_menu().
 */
function wmg_magento_api_menu() {
  $items = array();
  $items['admin/config/system/fanclub'] = array(
    'title' => t('Fan Club Magento API Settings'),
    'description' => 'Provides fanclub settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wmg_magento_api_settings_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function wmg_magento_api_block_info() {
  $blocks['fan_club_info'] = array(
    'info' => t('Fan Club Account Info.'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function wmg_magento_api_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'fan_club_info':
      $block['subject'] = t('Fan Club Account Info');
      $block['content'] = _wmg_magento_api_info_block_content();
      break;
  }
  return $block;
}

/**
 * Implements a system settings form.
 */
function wmg_magento_api_settings_form($form, &$form_state) {
  $roles = user_roles(TRUE);
  $form['fanclub_role'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fanclub role settings'),
    '#weight' => 5,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['fanclub_role']['wmg_magento_api_fanclub_role'] = array(
    '#type' => 'select',
    '#title' => t('Fanclub role'),
    '#default_value' => variable_get('wmg_magento_api_fanclub_role', 1),
    '#required' => TRUE,
    '#options' => $roles,
    '#description' => t("Please select the role that will be used for fanclub access."),
  );
  $form['fanclub_role']['wmg_magento_api_product_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Magento Subscription Product URL'),
    '#default_value' => variable_get('wmg_magento_api_product_url'),
    '#required' => TRUE,
    '#description' => t("Please add the product URL without any parameters (e.g. http://www.example.com)."),
  );
  $form['fanclub_role']['wmg_magento_api_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Magento API secret key'),
    '#default_value' => variable_get('wmg_magento_api_secret_key'),
    '#required' => TRUE,
    '#description' => t("Secret key for API request."),
  );
  $form['fanclub_api_calls'] = array(
    '#type' => 'fieldset',
    '#title' => t('Magento API Calls'),
    '#weight' => 5,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['fanclub_api_calls']['wmg_magento_api_soap_url'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP URL'),
    '#default_value' => variable_get('wmg_magento_api_soap_url'),
    '#required' => FALSE,
    '#description' => t("Please add the product URL without any parameters (e.g. http://www.example.com)."),
  );
  $form['fanclub_api_calls']['wmg_magento_api_soap_caching'] = array(
    '#type' => 'checkbox',
    '#title' => t('WSDL Caching'),
    '#default_value' => variable_get('wmg_magento_api_soap_caching', 0),
    '#options' => array(1 => 'On', 0 => 'Off'),
    '#description' => t("Should be checked if the WSDL caching should be enabled."),
  );
  $form['fanclub_api_calls']['wmg_magento_api_soap_username'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP Login Username'),
    '#default_value' => variable_get('wmg_magento_api_soap_username'),
    '#prefix' => '<br/>',
    '#required' => FALSE,
  );
  $form['fanclub_api_calls']['wmg_magento_api_soap_password'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP Login Password'),
    '#default_value' => variable_get('wmg_magento_api_soap_password'),
    '#required' => FALSE,
  );
  $form['fanclub_api_calls']['wmg_magento_api_soap_authentication'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use SOAP Authentication'),
    '#default_value' => variable_get('wmg_magento_api_soap_authentication', 0),
    '#options' => array(1 => 'On', 0 => 'Off'),
    '#prefix' => '<br/>',
    '#description' => t("Should be checked soap authentication is required."),
  );
  $form['fanclub_api_calls']['wmg_magento_api_soap_auth_user'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP Authentication Username'),
    '#default_value' => variable_get('wmg_magento_api_soap_auth_user'),
    '#required' => FALSE,
  );
  $form['fanclub_api_calls']['wmg_magento_api_soap_auth_password'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP Authentication Password'),
    '#default_value' => variable_get('wmg_magento_api_soap_auth_password'),
    '#required' => FALSE,
  );
  return system_settings_form($form);
}

function wmg_magento_api_services_resources() {
  $user_resource = array(
    'subscription' => array(
      'actions' => array(
        'update_profile' => array(
          'help' => 'Adds subscription for the user',
          'callback' => '_wmg_magento_api_services_update_profile',
          'args' => array(
            array(
              'name' => 'uid',
              'type' => 'int',
              'description' => 'A valid User ID',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'subscription_status',
              'type' => 'int',
              'description' => 'The subscription status',
              'source' => array('data' => 'subscription_status'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'recurring_profile_id',
              'type' => 'string',
              'description' => 'The Recurring Profile ID',
              'source' => array('data' => 'recurring_profile_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'magento_api_key',
              'type' => 'string',
              'description' => 'The Magento API Key',
              'source' => array('data' => 'magento_api_key'),
              'optional' => FALSE,
            ),
          ),
          'access callback' => 'services_access_menu',
        ),
        'get_profile' => array(
          'help' => 'Adds subscription for the user',
          'callback' => '_wmg_magento_api_services_resources_get_profile',
          'args' => array(
            array(
              'name' => 'uid',
              'type' => 'int',
              'description' => 'A valid User ID',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'magento_api_key',
              'type' => 'string',
              'description' => 'The Magento API Key',
              'source' => array('data' => 'magento_api_key'),
              'optional' => FALSE,
            ),
          ),
          'access callback' => 'services_access_menu',
        ),
      ),
    ),
  );
  return $user_resource;
}

/**
 * Callback for adding subscription.
 */
function _wmg_magento_api_services_update_profile($uid, $subscription_status, $recurring_profile_id, $magento_api_key) {
  $secret_key = variable_get('wmg_magento_api_secret_key');
  if ($magento_api_key != $secret_key) {
    if (module_exists('flog')) {
      flog_it(array('received_key' => $magento_api_key, 'expected_key' => $secret_key), 'Secret key did not match.');
    }
    return 'access denied';
  }
  if ($subscription_status == 'active') {
    $fanclub_role = variable_get('wmg_magento_api_fanclub_role');
    $role = user_role_load($fanclub_role);
    $user = user_load($uid);
    $user->roles = $user->roles + array($role->rid => $role->name);
    if (isset($recurring_profile_id)) {
      $user->field_recurring_profile_id[LANGUAGE_NONE][0]['value'] = $recurring_profile_id;
    }
    user_save($user);
  } elseif ($subscription_status == 'inactive') {
    $fanclub_role = variable_get('wmg_magento_api_fanclub_role');
    $role = user_role_load($fanclub_role);
    $user = user_load($uid);
    if (isset($user->roles[$role->rid])) {
      unset($user->roles[$role->rid]);
    }
    user_save($user);
  } else {
    return FALSE;
  }
  return TRUE;
}

/**
 * Callback for getting subscription status.
 */
function _wmg_magento_api_services_resources_get_profile($uid, $magento_api_key) {
  $secret_key = variable_get('wmg_magento_api_secret_key');
  if ($magento_api_key != $secret_key) {
    if (module_exists('flog')) {
      flog_it(array('received_key' => $magento_api_key, 'expected_key' => $secret_key), 'Secret key did not match.');
    }
    return 'access denied';
  }
  $user = user_load($uid);
  $subscription_status = 'inactive';
  $recurring_profile_id = '';
  if (isset($user->field_recurring_profile_id)) {
    $recurring_profile_id = $user->field_recurring_profile_id[LANGUAGE_NONE][0]['value'];
  }
  $fanclub_role = variable_get('wmg_magento_api_fanclub_role');
  if (array_key_exists($fanclub_role, $user->roles)) {
    $subscription_status = 'active';
  }
  return array('subscription_status' => $subscription_status, 'recurring_profile_id' => $recurring_profile_id);
}

/**
 * Implements hook_token_info().
 */
function wmg_magento_api_token_info() {

  $info['tokens']['user']['fan-club-store-link'] = array(
    'name' => t("Fanclub Store Link"),
    'description' => t("Fanclub Store Link"),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function wmg_magento_api_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  // Check if token type is user
  if ($type == 'user') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Check token is fan-club-store-link
        case 'fan-club-store-link':
          global $user;
          $replacements[$original] = variable_get('wmg_magento_api_product_url') . "?dfmn=" . $user->uid;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Helper function to generate info block content().
 */
function _wmg_magento_api_info_block_content()
{
  global $user;
  $user = user_load($user->uid);
  $output = '<ul>';
  $fanclub_role = variable_get('wmg_magento_api_fanclub_role');
  if (array_key_exists($fanclub_role, $user->roles)) {
    // Check if the results are available in the cache.
    if ($cache = cache_get('fanclub_account_info' . $user->uid, 'cache')) {
      if ($cache->expire > REQUEST_TIME) {
        return $cache->data;
      }
    }

    $soapParameters = array();
    $wsdl_caching_enabled = variable_get('wmg_magento_api_soap_caching', 0);
    $wsdl_authentication_enabled = variable_get('wmg_magento_api_soap_authentication', 0);
    $soap_url_wsdl = variable_get('wmg_magento_api_soap_url', 0);
    $soap_user = variable_get('wmg_magento_api_soap_username', 0);
    $soap_password = variable_get('wmg_magento_api_soap_password', 0);

    // Check for WSDL Caching.
    if ($wsdl_caching_enabled == FALSE) {
      ini_set("soap.wsdl_cache_enabled", "0");
    }

    // Check for WSDL Authentication.
    if ($wsdl_authentication_enabled) {
      $soapParameters = Array(
        'login' => variable_get('wmg_magento_api_soap_auth_user', 0),
        'password' => variable_get('wmg_magento_api_soap_auth_password', 0)
      );
    }
    if (isset($soap_url_wsdl) && !empty($soap_url_wsdl)) {
      try {
        // Initiate SOAP Client.
        $soapClient = new SoapClient($soap_url_wsdl, $soapParameters);
        // Soap Login.
        $session = $soapClient->login($soap_user, $soap_password);
        // Check for the recurring profile id.
        if (isset($user->field_recurring_profile_id)) {
          $recurring_profile_id = $user->field_recurring_profile_id[LANGUAGE_NONE][0]['value'];
          $result = $soapClient->recurringProfileInfo($session, $recurring_profile_id);
          $output .= '<li>' . t('Membership Active') . '</li>';
          if ($result->auto_renew) {
            foreach ($result->scheduled_payments as $payments) {
              if ($payments->status == 'upcoming') {
                $output .= '<li>' . t('Will auto-renew on') . $result->expiration_date . '</li>';
              }
            }
          } else {
            $output .= '<li>' . t('Will expire on') . $result->expiration_date . '</li>';
          }
        }
      } catch (Exception $e) {
        flog_it($e, 'Magento API Call ended with exception');
      }
    }
  } else {
    $output .= '<li>' . t('Membership Not Active') . '</li>';
  }
  $output .= '</ul>';
  // Set cache.
  cache_set('fanclub_account_info' . $user->uid, $output, 'cache', time() + 60 * 60);
  return $output;
}
