<?php
/**
 * @file
 *    Bunchball module. Define api, configuration and architecture for Bunchball
 *    modules and plugins.
 */

/**
 * Constants related to debugging mode.
 */
define('BUNCHBALL_DEBUG_NONE', 0);

define('BUNCHBALL_DEBUG_LOG', 1);

define('BUNCHBALL_DEBUG_DISPLAY', 2);

/**
 * Implement hook_menu().
 *
 * @return
 *   An array of menu items.
 */
function bunchball_menu() {
  $items = array();

  $items['admin/config/people/bunchball'] = array(
    'title' => 'Bunchball gamification',
    'description' => 'Connect to the Bunchball service and select user actions to track for rewards.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bunchball_admin_form'),
    'access arguments' => array('configure bunchball'),
    'file' => 'bunchball.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
  );

  $items['admin/config/people/bunchball/confirm'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bunchball_admin_confirm_form'),
    'access arguments' => array('configure bunchball'),
    'file' => 'bunchball.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/people/bunchball/main'] = array(
    'title' => 'Configuration',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/reports/bunchball'] = array(
    'title' => 'Bunchball debug log',
    'description' => 'Log of bunchball API requests and responses for test and debugging purposes',
    'page callback' => 'bunchball_log_page',
    'access callback' => 'bunchball_log_page_access',
    'file' => 'bunchball.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['bunchball/actions'] = array(
    'title' => 'Bunchball action list',
    'page callback' => 'bunchball_actions_autocomplete',
    'access arguments' => array('configure bunchball'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function bunchball_permission() {
  return array(
    'configure bunchball' => array(
      'title' => t('Configure Bunchball settings'),
      'description' => t('Configure the bunchball module including Bunchball API keys.'),
    ),
  );
}


/**
 * Implements hook_help()
 */
function bunchball_help($path, $arg) {
   if ($path == 'admin/help#bunchball') {
    return t("Here is a stub help page.  We'll need one eventually.");
  }
}

/**
 * Page access callback for displaying the debug log page.
 *
 * Only shows if the user has permission and debug mode is enabled.
 */
function bunchball_log_page_access() {
  return (variable_get('bunchball_debug_mode', 0) & BUNCHBALL_DEBUG_LOG) && user_access('access site reports');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Change submit button trim.
 */
function bunchball_form_bunchball_admin_form_alter(&$form, $form_state, $form_id) {
  $form['actions']['submit']['#value'] = t('Save');
}

/**
 * Get the Bunchball uuid from a Drupal user id.
 *
 * @see bunchball_admin_form()
 *
 * @todo Janrain uid support:
 *   - Make configurable if uuid/guid should be obtained.
 *   - Obtain Janrain uuid/guid.
 *   - Handle if user has no Janrain uuid/guid.
 *
 * @param int $uid
 *   Drupal user id.
 *
 * @param string $unique_id_type
 *   (Optional) Unique id type.
 *   If ommited the settings will be used from bunchball_admin_form().
 *
 * @return string
 *   Bunchball uuid.
 */
function bunchball_get_bunchball_uid($uid, $unique_id_type = NULL) {
  if ($unique_id_type === NULL) {
    $unique_id_type = variable_get('bunchball_unique_id', 'email');
  }
  $include_site_hash = variable_get('bunchball_unique_id_include_site_hash', FALSE);

  // Make sure Janrain capture is enabled if we want to use it for generating
  // uuids, else fall back to email.
  if ($unique_id_type === 'janrain_uuid' && !module_exists('janrain_capture')) {
    $unique_id_type = 'email';
  }

  $unique_id = '';
  switch ($unique_id_type) {
    case 'userid':
      $unique_id = $uid;
      break;

    case 'email':
      $account = user_load($uid);
      $unique_id = $account->mail;
      break;

    case 'username':
      $account = user_load($uid);
      $unique_id = $account->name;
      break;

    case 'janrain_uuid':
      $account = user_load($uid);
      if (!empty($account->field_janrain_capture_uuid[LANGUAGE_NONE][0]['value'])) {
        $unique_id = $account->field_janrain_capture_uuid[LANGUAGE_NONE][0]['value'];
      }
      else {
        // If Janrain UUID cannot be found for the user, use the fallback.
        return bunchball_userid_fallback($account);
      }
      break;

    default:
      $account = user_load($uid);
      $unique_id = reset(module_invoke_all('bunchball_userid', $account, $unique_id_type));
      if (empty($unique_id)) {
        return bunchball_userid_fallback($account);
      }
      break;
  }

  if ($include_site_hash) {
    $unique_id .= '_' . drupal_get_private_key();
  }

  return $unique_id;
}

/**
 * Supply the fallback bunchball userid if the primary choice is not available.
 */
function bunchball_userid_fallback($account) {
  $unique_id_fallback = variable_get('bunchball_janrain_fallback', 'email');
  return bunchball_get_bunchball_uid($account->uid, $unique_id_fallback);
}

/**
 * Logs or displays a debug/testing message depending on settings.
 */
function bunchball_debug($message, $variables) {
  if (variable_get('bunchball_debug_mode', 0) & BUNCHBALL_DEBUG_LOG) {
    db_insert('bunchball_log')
      ->fields(array(
        'uid' => $GLOBALS['user']->uid,
        // Can't rely on REQUEST_TIME to provide sufficient granularity
        'timestamp' => time(),
        'message' => $message,
        'variables' => serialize($variables),
      ))
      ->execute();
  }

  // Setting messages should only be done for logged-in users due to anonymous caching.
  if ((variable_get('bunchball_debug_mode', 0) & BUNCHBALL_DEBUG_DISPLAY) && user_is_logged_in()) {
    drupal_set_message(t($message, $variables));
  }
}

/**
 * Determine whether bunchball has the minimum configuration requirements to allow initialization.
 *
 * @return
 *   TRUE if Bunchball has been configured with all of the minimum data: api key,
 *   secret and url for the current environment.
 */
function _bunchball_is_configured() {
  $environment = variable_get('bunchball_environment');
  return variable_get('bunchball_apikey')
    && variable_get('bunchball_apikey')
    && variable_get("bunchball_{$environment}_url");
}

/**
 * Page callback for bunchball/actions.
 */
function bunchball_actions_autocomplete($string = '') {
  $matches = array();

  if ($string) {
    try {
      foreach (NitroAPI_Factory::getInstance()->getActions() as $result) {
        if (stripos($result, $string) === 0) {
          $matches[$result] = check_plain($result);
        }
      }
    } catch (NitroAPI_Exception $ex) {
      watchdog('bunchball', $ex->getMessage(), array(), WATCHDOG_WARNING);
    }
  }

  drupal_json_output($matches);
}
