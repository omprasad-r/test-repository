<?php
/**
 * @file
 * Merge two or more forum topics into one.
 *
 */

/**
 * Implements hook_menu().
 */
function forum_merge_menu() {
  $items = array();

  $items['node/%/merge'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Merge forum',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forum_merge_page_form', 1),
    'access callback' => 'forum_merge_access_callback',
    'access arguments' => array(1),
  );

  $items['forum_merge/autocomplete/%'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Forum topic autocomplete',
    'page callback' => 'forum_merge_autocomplete_callback',
    'access arguments' => array('merge forums'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function forum_merge_permission() {
  return array(
    'merge forums' => array(
      'title' => t('Merge forums'),
      'description' => t('Permission to merge two forum topics into one.'),
    ),
  );
}

/**
 * Access callback to forum merge page.
 *
 * @see forum_merge_menu().
 */
function forum_merge_access_callback($nid) {
  $node = node_load($nid);
  // If the displayed content is a forum topic, and the viewing user has the rights to merge and update
  // forum topics and create redirect for it.
  if ($node->type === 'forum' && user_access('merge forums') && node_access('update', $node) && redirect_access('create', 'redirect')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Form builder to forum merge page.
 *
 * @see forum_merge_menu().
 */
function forum_merge_page_form($form, $form_state, $nid) {
  $form['#nid'] = $nid;

  $form['forum'] = array(
    '#type' => 'textfield',
    '#title' => t('Topic titles'),
    '#required' => TRUE,
    '#description' => t('Choose forum topics which you would like to merge into the actual one. Type comma-separated topic names.'),
    '#autocomplete_path' => 'forum_merge/autocomplete/',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Merge'),
  );

  return $form;
}

/**
 * Validate handler for forum_merge_page_form().
 */
function forum_merge_page_form_validate($form, &$form_state) {
  if ($form_state['values']['forum']) {
    $form_state['forum_ids'] = array();
    $forums = drupal_explode_tags($form_state['values']['forum']);

    foreach ($forums as $forum) {
      $forum_id = forum_merge_parse_id($forum);
      // If just the title has been given.
      if (!$forum_id) {
        // Get the topics that satisfy the conditions.
        $query = db_select('node', 'n');
        $query->addTag('node_access');

        // Select rows that match by node name.
        $result = $query
          ->fields('n', array('nid', 'title'))
          ->condition('n.title', $forum)
          ->execute()
          ->fetchAll();

        // If get results based on the given title.
        if ($result) {
          // More than one results.
          if (count($result) > 1) {
            $message = 'There are more than one title of forum topics are matched to the following: !title';
            form_set_error('forum', t($message, array('!title' => drupal_placeholder($forum))));
          }
          $result = reset($result);
          $forum_id = $result->nid;
        }
        else {
          // No result.
          $message = 'There is no forum topic named: !title';
          form_set_error('forum', t($message, array('!title' => drupal_placeholder($forum))));
        }
      }
      if ($forum_id) {
        // If one of the given topic is the topic that the user wants to merge into.
        if ($forum_id === $form['#nid']) {
          $message = 'You can\'t merge a topic into itself!';
          form_set_error('forum', t($message));
        }

        // Check the node and the node access.
        $node = node_load($forum_id);
        if (!$node) {
          $message = 'The topic with id !nid doesn\'t exist.';
          form_set_error('forum', t( $message, array('!nid' => drupal_placeholder($forum_id))));
        }
        elseif (!node_access('delete', $node)) {
          $message = 'You have no grants to be able to delete the forum topic with the following title: !title';
          form_set_error('forum', t( $message, array('!title' => drupal_placeholder($node->title))));
        }
        $form_state['forum_ids'][$forum_id] = $forum_id;
      }
    }
  }
}

/**
 * Submit handler for forum_merge_page_form().
 */
function forum_merge_page_form_submit($form, $form_state) {
  $batch = array(
    'title' => t('Merging...'),
    'operations' => array(),
    'finished' => 'forum_merge_finished_callback',
  );

  $base_node = node_load($form['#nid']);
  // Add operations.
  foreach ($form_state['forum_ids'] as $forum_id) {
    $forum_node = node_load($forum_id);
    $batch['operations'][] = array('forum_merge_save_comments', array($base_node, $forum_node));
  }
  batch_set($batch);
}

/**
 * Batch operation to save the comments of the old forum to the updated one.
 *
 * @param $base_nid
 *   The node id of the updated forum.
 * @param $forum_id
 *   The node id of the deprecated forum.
 * @param $context
 *   The context parameter for the batch process.
 *
 * @see forum_merge_page_form_submit().
 */
function forum_merge_save_comments($base_node, $forum_node, &$context) {
  global $user;

  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_comment'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(cid) FROM {comment} WHERE nid = :nid',
      array(':nid' => $forum_node->nid))->fetchField();
  }
  // Set the limit to 5.
  $limit = 5;
  $result = db_select('comment')
    ->fields('comment', array('cid'))
    ->condition('cid', $context['sandbox']['current_comment'], '>')
    ->condition('nid', $forum_node->nid)
    ->orderBy('cid')
    ->range(0, $limit)
    ->execute();

  foreach ($result as $row) {
    // Move the comments under the old forums to the new one.
    $comment = comment_load($row->cid);
    $comment->nid = $base_node->nid;
    comment_save($comment);

    // Update the status variables.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_comment'] = $comment->cid;
  }

  // Delete the deprecated forum topic.
  node_delete($forum_node->nid);

  // Create redirect from the old topic to the updated one.
  $redirect = new stdClass();
  $redirect->uid = $user->uid;
  $redirect->type = 'redirect';
  $redirect->source = 'node/' . $forum_node->nid;
  $redirect->source_options = serialize(array());
  $redirect->redirect = 'node/' . $base_node->nid;
  $redirect->redirect_options = serialize(array());
  $redirect->language = $forum_node->language;
  $redirect->status_code = 301;
  redirect_save($redirect);

  // Progress bar.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Finished callback to the batch operation.
 *
 * @see forum_merge_page_form_submit().
 */
function forum_merge_finished_callback($success, $results, $operations) {
  // The 'success' parameter means no fatal PHP errors were detected. All
  // other error management should be handled using 'results'.
  if ($success) {
    $message = t('The Forum topics have been merge correctly.');
    $type = 'status';
  }
  else {
    $message = t('Finished with an error.');
    $type = 'error';
  }
  drupal_set_message($message, $type);
}

/**
 * Autocomplete callback for forum topics.
 *
 * @see forum_merge_menu().
 */
function forum_merge_autocomplete_callback($string = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $forum_typed = drupal_explode_tags($string);
  $forum_last = array_pop($forum_typed);

  $matches = array();
  if ($forum_typed != '') {

    // Get the topics that satisfy the conditions.
    $query = db_select('node', 'n');
    $query->addTag('node_access');

    // Select rows that match by node name.
    $results = $query
      ->fields('n', array('nid', 'title'))
      ->condition('n.title', '%' . db_like($forum_last) . '%', 'LIKE')
      ->range(0, 10)
      ->execute()
      ->fetchAll();

    $prefix = count($forum_typed) ? drupal_implode_tags($forum_typed) . ', ' : '';

    foreach ($results as $result) {
      $matches[$prefix . "{$result->title} [id:{$result->nid}]"] = "{$result->title} [id:{$result->nid}]";
    }
  }
  drupal_json_output($matches);
}

/**
 * Parse a field value in form of "title [id:123]" and return 123
 *
 * @param $string
 *   Forum name with ID in form of "title [id:123]".
 * @return
 *   Int value of the ID or NULL if not found.
 */
function forum_merge_parse_id($string) {
  preg_match('/\[id:([^\[]*)\]$/', $string, $matches);
  if (count($matches) == 2) {
    return $matches[1];
  }
  return NULL;
}
