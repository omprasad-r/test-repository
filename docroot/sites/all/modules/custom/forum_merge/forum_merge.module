<?php
/**
 * @file
 * Merge two or more forum topics into one.
 *
 */

/**
 * Implements hook_menu().
 */
function forum_merge_menu() {
  $items = array();

  $items['node/%/merge'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Merge forum',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forum_merge_page_form', 1),
    'access callback' => 'forum_merge_access_callback',
    'access arguments' => array(1),
  );

  $items['forum_merge/autocomplete/%'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Forum topic autocomplete',
    'page callback' => 'forum_merge_autocomplete_callback',
    'access arguments' => array('merge forums'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function forum_merge_permission() {
  return array(
    'merge forums' => array(
      'title' => t('Merge forums'),
      'description' => t('Permission to merge two forum topics into one.'),
    ),
  );
}

/**
 * Form builder to forum merge page.
 *
 * @see forum_merge_menu().
 */
function forum_merge_page_form($form, $form_state, $nid) {
  $form['#nid'] = $nid;

  $form['forum'] = array(
    '#type' => 'textfield',
    '#title' => t('Topic titles'),
    '#required' => TRUE,
    '#description' => t('Choose forum topics which you would like to merge into the actual one. Type comma-separated topic names.'),
    '#autocomplete_path' => 'forum_merge/autocomplete/',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Merge'),
  );

  return $form;
}

/**
 * Validate handler for forum_merge_page_form().
 */
function forum_merge_page_form_validate($form, &$form_state) {
  if ($form_state['values']['forum']) {
    $form_state['forum_ids'] = array();
    $forums = drupal_explode_tags($form_state['values']['forum']);

    foreach ($forums as $forum) {
      $forum_id = forum_merge_parse_id($forum);
      // If just the title has been given.
      if (!$forum_id) {
        // Get the topics that satisfy the conditions.
        $query = db_select('node', 'n');
        $query->addTag('node_access');

        // Select rows that match by node name.
        $result = $query
          ->fields('n', array('nid', 'title'))
          ->condition('n.title', $forum)
          ->execute()
          ->fetchAll();

        // If get results based on the given title.
        if ($result) {
          // More than one results.
          if (count($result) > 1) {
            $message = 'There are more than one title of forum topics are matched to the following: !title';
            form_set_error('forum', t($message, array('!title' => drupal_placeholder($forum))));
          }
          $result = reset($result);
          $forum_id = $result->nid;
        }
        else {
          // No result.
          $message = 'There is no forum topic named: !title';
          form_set_error('forum', t($message, array('!title' => drupal_placeholder($forum))));
        }
      }
      if ($forum_id) {
        // If one of the given topic is the topic that the user wants to merge into.
        if ($forum_id === $form['#nid']) {
          $message = 'You can\'t merge a topic into itself!';
          form_set_error('forum', t($message));
        }

        // Check the node and the node access.
        $node = node_load($forum_id);
        if (!$node) {
          $message = 'The topic with id !nid doesn\'t exist.';
          form_set_error('forum', t( $message, array('!nid' => drupal_placeholder($forum_id))));
        }
        elseif (node_access('delete', $node)) {
          $message = 'You have no grants to be able to delete the forum topic with the following name: !title';
          form_set_error('forum', t( $message, array('!title' => drupal_placeholder($node->title))));
        }
      }
    }
  }
}

/**
 * Submit handler for forum_merge_page_form().
 */
function forum_merge_page_form_submit($form, $form_state) {
  $batch = array(
    'title' => t('Merging...'),
    'operations' => array(
      array('forum_merge_save_comments', array($form['#nid'], $form_state['forum_nids'])),
      array('forum_merge_delete_forums', array($form['#nid'], $form_state['forum_nids']))
    ),
    'finished' => 'forum_merge_finished_callback',
  );
  batch_set($batch);
}

function forum_merge_save_comments($base_nid, $forum_ids, &$context) {
  // Save all the comments to the base node.
}

function forum_merge_delete_forums($redirect_nid, $forum_ids, &$context) {
  // Delete all the merged forums and make a redirect to the base node.
}

function forum_merge_finished_callback($success, $results, $operations) {
  // Finished the batch operation with a message.
}

/**
 * Access callback to forum merge page.
 *
 * @see forum_merge_menu().
 */
function forum_merge_access_callback($nid) {
  $node = node_load($nid);
  // If the displayed content is a forum topic, and the viewing user has the rights to merge and update
  // forum topics.
  if ($node->type === 'forum' && user_access('merge forums') && node_access('update', $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Autocomplete callback for forum topics.
 *
 * @see forum_merge_menu().
 */
function forum_merge_autocomplete_callback($string = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $forum_typed = drupal_explode_tags($string);
  $forum_last = array_pop($forum_typed);

  $matches = array();
  if ($forum_typed != '') {

    // Get the topics that satisfy the conditions.
    $query = db_select('node', 'n');
    $query->addTag('node_access');

    // Select rows that match by node name.
    $results = $query
      ->fields('n', array('nid', 'title'))
      ->condition('n.title', '%' . db_like($forum_last) . '%', 'LIKE')
      ->range(0, 10)
      ->execute()
      ->fetchAll();

    $prefix = count($forum_typed) ? drupal_implode_tags($forum_typed) . ', ' : '';

    foreach ($results as $result) {
      $matches[$prefix . "{$result->title} [id:{$result->nid}]"] = "{$result->title} [id:{$result->nid}]";
    }
  }
  drupal_json_output($matches);
}

/**
 * Parse a field value in form of "title [id:123]" and return 123
 *
 * @param $string
 *   Forum name with ID in form of "title [id:123]".
 * @return
 *   Int value of the ID or NULL if not found.
 */
function forum_merge_parse_id($string) {
  preg_match('/\[id:([^\[]*)\]$/', $string, $matches);
  if (count($matches) == 2) {
    return $matches[1];
  }
  return NULL;
}
