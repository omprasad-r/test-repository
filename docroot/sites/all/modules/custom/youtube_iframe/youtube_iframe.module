<?php

/**
 * @file youtube_iframe.module
 *
 */

/**
 * Implements hook_field_formatter_info().
 */
function youtube_iframe_field_formatter_info() {
  $info = array(
    'youtube_iframe_url' => array(
      'label' => t('Youtube Iframe'),
      'field types' => array('text'),
      'settings' => array(//Array of the settings we'll create
        'width' => '200',
        'height' => '150',
        'autoplay' => '',
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function youtube_iframe_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  //Add height, width and autoplay
  $element['width'] = array(
    '#type' => 'textfield', 
    '#title' => t('Width'),
    '#description' => t('Width of the iframe'), 
    // '#default_value' => 300, 
    '#default_value' => $settings['width'],
  );
  $element['height'] = array(
    '#type' => 'textfield', 
    '#title' => t('Height'),
    '#description' => t('Height of the iframe'),
    '#default_value' => $settings['height'],
  );
  $element['autoplay'] = array(
    '#title' => t('Autoplay'),
    '#type' => 'checkbox',
    '#default_value' => $settings['autoplay'],
   );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function youtube_iframe_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Set custom size of the iframe"', array(
    '@width' => $settings['width'],
    '@height' => $settings['height'],
    '@autoplay' => $settings['autoplay'],
      )); 
  return $summary;
}

/*
 * Implements hook_field_formatter_view(). 
 */
function youtube_iframe_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {

    case 'youtube_iframe_url':
      $settings = $display['settings']; // get the settings
      $width = $settings['width']; // The Size setting selected in the settings form
      $hieght = $settings['height']; // The Size setting selected in the settings form
      $autoplay = $settings['autoplay']; 
      foreach ($items as $delta => $item) {
        if (strpos($item['value'], 'youtube') !== false) {
          $video_id = youtube_iframe_embed_url($item['value']);
          $element[$delta] = array(
            '#type' => 'markup',
            '#markup' => t('<iframe id="player-@vid" width="@width" height="@height" frameborder="0" 
src="http://www.youtube.com/embed/@vid?autoplay=@autoplay&rel=0&enablejsapi=1">
</iframe>', array('@vid' => $video_id, '@height' => $hieght,
              '@width' => $width, '@autoplay' => $autoplay)),
          );
        }
      }
      break;
  }
  return $element;
}

/*
 * Custom callback to get video id from URL
 */
function youtube_iframe_embed_url($youtube_url) {

  preg_match(
      '/[\\?\\&]v=([^\\?\\&]+)/', $youtube_url, $matches
  );
  $id = $matches[1];
  return $id;
}

/**
 * Implements hook_file_formatter_info().
 */
function youtube_iframe_file_formatter_info() {
  $formatters['youtube_iframe_media_url'] = array(
    'label' => t('Youtube Iframe with media URL'),
    'default settings' => array('width' => '560', 'height' => '340'),
    'view callback' => 'youtube_iframe_file_formatter_view',
    'settings callback' => 'youtube_iframe_file_formatter_settings',
  );
  return $formatters;
}

/**
 * Implements hook_file_formatter_view().
 */
function youtube_iframe_file_formatter_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  // WYSIWYG does not yet support video inside a running editor instance.
  $autoplay = '?autoplay=' . $display['settings']['autoplay'];
  $enablejsapi = '&enablejsapi=1';
  
  if (strpos($file->uri, 'youtube://v/') !== false) {
    $youtube_video = explode('youtube://v/', $file->uri);
    $video_id = $youtube_video[1];
  }
  else {
    $youtube_video = explode('youtube://l/', $file->uri);
    $video_id = $youtube_video[1];
    $videoseries = 'videoseries?list=';
    $autoplay = '';
  }
  if ($scheme == 'youtube' && empty($file->override['wysiwyg'])) {
    $element = array(
      '#markup' => t('<iframe id="player-@vid" width="@width" height="@height"
src="http://www.youtube.com/embed/@videoseries@vid@autoplay@enablejsapi">
</iframe>', array('@videoseries' => $videoseries, '@vid' => $video_id, '@height' => $display['settings']['height'],
        '@width' => $display['settings']['width'], '@autoplay' => $autoplay, '@enablejsapi' => $enablejsapi)),
    );

    return $element;
  }
}

/**
 * Implements hook_file_formatter_settings().
 */
function youtube_iframe_file_formatter_settings($form, &$form_state, $settings) {
  $element = array();
  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
  );
  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );
  $element['autoplay'] = array(
    '#title' => t('Autoplay'),
    '#type' => 'checkbox',
    '#default_value' => $settings['autoplay'],
  );
  return $element;
}
